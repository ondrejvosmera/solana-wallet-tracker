import { Connection, Transaction, VersionedTransaction } from '@solana/web3.js';
import { Network, ShyftWallet } from '../types';
/**
 * This function accepts the connection to the user’s wallet,
 * the encodedTransaction received in the response of the API call and the wallet object.
 * The only difference is, along with these parameters,
 * this function also takes in an array of private keys,
 * which can contain all the private keys required to partially sign the transaction.
 *
 * @param network solana rpc network (mainnet-beta/devnet/testnet)
 * @param encodedTransaction serialized transaction (base64 string)
 * @param privateKeys private key of wallets (Array of strings)
 * @returns transaction signature
 */
export declare function signAndSendTransactionWithPrivateKeys(network: Network, encodedTransaction: string, privateKeys: string[]): Promise<string>;
/**
 * This function accepts connection, the encoded_transaction from the SHYFT API response and the wallet object.
 * The wallet object and the connection to the user’s wallet can be obtained.
 *
 * @param connection solana rpc connection
 * @param encodedTransaction serialized transaction (base64 string)
 * @param wallet wallet
 * @returns transaction signature
 */
export declare function signAndSendTransaction(connection: Connection, encodedTransaction: string, wallet: ShyftWallet): Promise<string>;
/**
 * This function accepts the encodedTransaction received
 * in the response of the API call and takes an array of private keys,
 * which can contain all the private keys required to partially sign the transaction.
 * Could be useful when a transaction has required multiple signature to further proceed.
 *
 * @param encodedTransaction serialized transaction (base64 string)
 * @param privateKeys private keys of wallet (array of string)
 * @returns Raw transaction
 */
export declare function partialSignTransactionWithPrivateKeys(encodedTransaction: string, privateKeys: string[]): Promise<Transaction | VersionedTransaction>;
