import { restApiCall } from '../utils';
export class TransactionClient {
    constructor(config) {
        this.config = config;
    }
    async raw(input) {
        var _a;
        const params = {
            network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
            txn_signature: input.txnSignature,
        };
        const data = await restApiCall(this.config.apiKey, {
            method: 'get',
            url: 'transaction/raw',
            params,
        });
        const transaction = data.result;
        return transaction;
    }
    async parsed(input) {
        var _a;
        const params = {
            network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
            txn_signature: input.txnSignature,
        };
        const data = await restApiCall(this.config.apiKey, {
            method: 'get',
            url: 'transaction/parsed',
            params,
        });
        const transaction = data.result;
        return transaction;
    }
    async history(input) {
        var _a;
        const params = {
            network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
            account: input.account,
        };
        if (input === null || input === void 0 ? void 0 : input.txNum) {
            if (input.txNum > 100 || input.txNum < 1)
                throw new Error("'txNum' should not be greater than 100 or less than 1");
            params['tx_num'] = input.txNum;
        }
        if (input === null || input === void 0 ? void 0 : input.beforeTxSignature) {
            params['before_tx_signature'] = input.beforeTxSignature;
        }
        if (input === null || input === void 0 ? void 0 : input.enableRaw) {
            params['enable_raw'] = input.enableRaw;
        }
        if (input === null || input === void 0 ? void 0 : input.enableEvents) {
            params['enable_events'] = input.enableEvents;
        }
        const data = await restApiCall(this.config.apiKey, {
            method: 'get',
            url: 'transaction/history',
            params,
        });
        const transactions = data.result;
        return transactions;
    }
    async parseSelected(input) {
        var _a;
        if (input.transactionSignatues.length > 50 ||
            input.transactionSignatues.length < 1) {
            throw new Error('allowed between 1 to 50: transactionSignatues');
        }
        const reqBody = {
            network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
            transaction_signatures: input.transactionSignatues,
        };
        if (input === null || input === void 0 ? void 0 : input.enableRaw) {
            reqBody['enable_raw'] = input.enableRaw;
        }
        if (input === null || input === void 0 ? void 0 : input.enableEvents) {
            reqBody['enable_events'] = input.enableEvents;
        }
        const data = await restApiCall(this.config.apiKey, {
            method: 'post',
            url: 'transaction/parse_selected',
            data: reqBody,
        });
        const transactions = data.result;
        return transactions;
    }
    async send(input) {
        var _a, _b;
        const reqBody = {
            network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
            encoded_transaction: input.encodedTransaction,
        };
        const data = await restApiCall(this.config.apiKey, {
            method: 'post',
            url: 'transaction/send_txn',
            data: reqBody,
        });
        const result = (_b = data.result) === null || _b === void 0 ? void 0 : _b.signature;
        return result;
    }
    async sendMany(input) {
        var _a;
        if (input.encodedTransactions.length > 50 ||
            input.encodedTransactions.length < 1) {
            throw new Error('allowed between 1 to 50: encodedTransactions');
        }
        const reqBody = {
            network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
            encoded_transactions: input.encodedTransactions,
        };
        if (input === null || input === void 0 ? void 0 : input.commitment) {
            reqBody['commitment'] = input.commitment;
        }
        const data = await restApiCall(this.config.apiKey, {
            method: 'post',
            url: 'transaction/send_many_txns',
            data: reqBody,
        });
        const result = data.result;
        return result;
    }
}
//# sourceMappingURL=transaction-client.js.map