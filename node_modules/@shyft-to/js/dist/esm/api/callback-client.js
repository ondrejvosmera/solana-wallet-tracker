import { restApiCall } from '../utils';
export class CallbackClient {
    constructor(config) {
        this.config = config;
    }
    async register(input) {
        var _a;
        try {
            if (!this.isValidUrl(input.callbackUrl)) {
                throw new Error(`not a valid URL: ${input.callbackUrl}`);
            }
            const reqBody = {
                network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                addresses: input.addresses,
                callback_url: input.callbackUrl,
            };
            if (input === null || input === void 0 ? void 0 : input.events) {
                reqBody['events'] = input.events;
            }
            if (input === null || input === void 0 ? void 0 : input.enableRaw) {
                reqBody['enable_raw'] = input.enableRaw;
            }
            if (input === null || input === void 0 ? void 0 : input.enableEvents) {
                reqBody['enable_events'] = input.enableEvents;
            }
            if (input === null || input === void 0 ? void 0 : input.type) {
                reqBody['type'] = input.type;
            }
            if (input === null || input === void 0 ? void 0 : input.encoding) {
                reqBody['encoding'] = input.encoding;
            }
            const response = await restApiCall(this.config.apiKey, {
                method: 'post',
                url: 'callback/create',
                data: reqBody,
            });
            const callback = response.result;
            return callback;
        }
        catch (error) {
            throw error;
        }
    }
    async remove(input) {
        try {
            const reqBody = {
                id: input.id,
            };
            const response = await restApiCall(this.config.apiKey, {
                method: 'delete',
                url: 'callback/remove',
                data: reqBody,
            });
            const isRemoved = response.success;
            return isRemoved;
        }
        catch (error) {
            throw error;
        }
    }
    async update(input) {
        var _a;
        try {
            if (!this.isValidUrl(input.callbackUrl)) {
                throw new Error(`not a valid URL: ${input.callbackUrl}`);
            }
            const reqBody = {
                network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                id: input.id,
                addresses: input.addresses,
                callback_url: input.callbackUrl,
            };
            if (input === null || input === void 0 ? void 0 : input.events) {
                reqBody['events'] = input.events;
            }
            if (input === null || input === void 0 ? void 0 : input.enableRaw) {
                reqBody['enable_raw'] = input.enableRaw;
            }
            if (input === null || input === void 0 ? void 0 : input.enableEvents) {
                reqBody['enable_events'] = input.enableEvents;
            }
            if (input === null || input === void 0 ? void 0 : input.type) {
                reqBody['type'] = input.type;
            }
            if (input === null || input === void 0 ? void 0 : input.encoding) {
                reqBody['encoding'] = input.encoding;
            }
            const response = await restApiCall(this.config.apiKey, {
                method: 'post',
                url: 'callback/update',
                data: reqBody,
            });
            const callback = response.result;
            return callback;
        }
        catch (error) {
            throw error;
        }
    }
    async list() {
        try {
            const response = await restApiCall(this.config.apiKey, {
                method: 'get',
                url: 'callback/list',
            });
            const callbacks = response.result.map((callback) => {
                return {
                    id: callback === null || callback === void 0 ? void 0 : callback._id,
                    network: callback === null || callback === void 0 ? void 0 : callback.network,
                    addresses: callback === null || callback === void 0 ? void 0 : callback.addresses,
                    callback_url: callback === null || callback === void 0 ? void 0 : callback.callback_url,
                    events: callback === null || callback === void 0 ? void 0 : callback.events,
                    enable_raw: callback === null || callback === void 0 ? void 0 : callback.enable_raw,
                    enable_events: callback === null || callback === void 0 ? void 0 : callback.enable_events,
                    type: callback === null || callback === void 0 ? void 0 : callback.type,
                    encoding: callback === null || callback === void 0 ? void 0 : callback.encoding,
                    created_at: new Date(callback.created_at),
                    updated_at: new Date(callback.updated_at),
                };
            });
            return callbacks;
        }
        catch (error) {
            throw error;
        }
    }
    async addAddresses(input) {
        try {
            const reqBody = {
                id: input.id,
                addresses: input.addresses,
            };
            const response = await restApiCall(this.config.apiKey, {
                method: 'post',
                url: 'callback/add-addresses',
                data: reqBody,
            });
            const callback = response.result;
            return callback;
        }
        catch (error) {
            throw error;
        }
    }
    async removeAddresses(input) {
        try {
            const reqBody = {
                id: input.id,
                addresses: input.addresses,
            };
            const response = await restApiCall(this.config.apiKey, {
                method: 'post',
                url: 'callback/remove-addresses',
                data: reqBody,
            });
            const callback = response.result;
            return callback;
        }
        catch (error) {
            throw error;
        }
    }
    isValidUrl(url) {
        try {
            new URL(url);
            return true;
        }
        catch (err) {
            return false;
        }
    }
}
//# sourceMappingURL=callback-client.js.map