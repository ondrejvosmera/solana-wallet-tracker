import { restApiCall } from '../utils';
import { MpListingClient } from './mp-listing-client';
import { MpBiddingClient } from './mp-bidding-client';
const WRAPPED_SOL_ADDRESS = 'So11111111111111111111111111111111111111112';
export class MarketplaceClient {
    constructor(config) {
        this.config = config;
        this.listing = new MpListingClient(this.config);
        this.bidding = new MpBiddingClient(this.config);
    }
    async create(input) {
        var _a, _b;
        try {
            if (typeof (input === null || input === void 0 ? void 0 : input.transactionFee) === 'number' &&
                (input.transactionFee > 100 || input.transactionFee < 0)) {
                throw new Error('transactionFee should not be greater than 100 or lower than 0');
            }
            const reqBody = {
                network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                creator_wallet: input.creatorWallet,
                transaction_fee: (_b = input === null || input === void 0 ? void 0 : input.transactionFee) !== null && _b !== void 0 ? _b : 0,
            };
            if (input === null || input === void 0 ? void 0 : input.authorityAddress) {
                reqBody['authority_address'] = input.authorityAddress;
            }
            if (input === null || input === void 0 ? void 0 : input.currencyAddress) {
                reqBody['currency_address'] = input.currencyAddress;
            }
            if (input === null || input === void 0 ? void 0 : input.feePayer) {
                reqBody['fee_payer'] = input.feePayer;
            }
            if (input === null || input === void 0 ? void 0 : input.feeRecipient) {
                reqBody['fee_recipient'] = input.feeRecipient;
            }
            const data = await restApiCall(this.config.apiKey, {
                method: 'post',
                url: 'marketplace/create',
                data: reqBody,
            });
            const response = data.result;
            return response;
        }
        catch (error) {
            throw error;
        }
    }
    async update(input) {
        var _a;
        try {
            const reqBody = {
                network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                authority_wallet: input.authorityWallet,
                marketplace_address: input.marketplaceAddress,
            };
            if (input === null || input === void 0 ? void 0 : input.newAuthorityAddress) {
                reqBody['new_authority_address'] = input.newAuthorityAddress;
            }
            if (input === null || input === void 0 ? void 0 : input.transactionFee) {
                reqBody['transaction_fee'] = input.transactionFee;
            }
            if (input === null || input === void 0 ? void 0 : input.feePayer) {
                reqBody['fee_payer'] = input.feePayer;
            }
            if (input === null || input === void 0 ? void 0 : input.feeRecipient) {
                reqBody['fee_recipient'] = input.feeRecipient;
            }
            const data = await restApiCall(this.config.apiKey, {
                method: 'post',
                url: 'marketplace/update',
                data: reqBody,
            });
            const response = data.result;
            return response;
        }
        catch (error) {
            throw error;
        }
    }
    async find(input) {
        var _a, _b;
        try {
            const params = {
                network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                authority_address: input.authorityAddress,
                currency_address: (_b = input === null || input === void 0 ? void 0 : input.currencyAddress) !== null && _b !== void 0 ? _b : WRAPPED_SOL_ADDRESS,
            };
            const data = await restApiCall(this.config.apiKey, {
                method: 'get',
                url: 'marketplace/find',
                params,
            });
            const response = data.result;
            return response;
        }
        catch (error) {
            throw error;
        }
    }
    async treasuryBalance(input) {
        var _a;
        try {
            const params = {
                network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                marketplace_address: input.marketplaceAddress,
            };
            const data = await restApiCall(this.config.apiKey, {
                method: 'get',
                url: 'marketplace/treasury_balance',
                params,
            });
            const treasuryBalance = data.result;
            return treasuryBalance;
        }
        catch (error) {
            throw error;
        }
    }
    async stats(input) {
        var _a;
        try {
            const params = {
                network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                marketplace_address: input.marketplaceAddress,
            };
            const data = await restApiCall(this.config.apiKey, {
                method: 'get',
                url: 'marketplace/stats',
                params,
            });
            const stats = data.result;
            stats.start_date = new Date(stats.start_date);
            stats.end_date = new Date(stats.end_date);
            return stats;
        }
        catch (error) {
            throw error;
        }
    }
    async withdrawFee(input) {
        var _a;
        try {
            const reqBody = {
                network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                marketplace_address: input.marketplaceAddress,
                authority_wallet: input.authorityWallet,
                amount: input.amount,
            };
            const data = await restApiCall(this.config.apiKey, {
                method: 'post',
                url: 'marketplace/withdraw_fee',
                data: reqBody,
            });
            const withdrawFeeTxn = data.result;
            return withdrawFeeTxn;
        }
        catch (error) {
            throw error;
        }
    }
}
//# sourceMappingURL=marketplace-client.js.map