import { ShyftConfig } from '../utils';
import { Network, TxnAction, CallBack, CallbackType, CallbackEncoding } from '../types';
export declare class CallbackClient {
    private readonly config;
    constructor(config: ShyftConfig);
    register(input: {
        network?: Network;
        addresses: string[];
        callbackUrl: string;
        events?: TxnAction[];
        enableRaw?: boolean;
        enableEvents?: boolean;
        type?: CallbackType;
        encoding?: CallbackEncoding;
    }): Promise<Omit<CallBack, 'created_at' | 'updated_at'>>;
    remove(input: {
        id: string;
    }): Promise<boolean>;
    update(input: {
        network?: Network;
        id: string;
        addresses: string[];
        callbackUrl: string;
        events?: TxnAction[];
        enableRaw?: boolean;
        enableEvents?: boolean;
        type?: CallbackType;
        encoding?: CallbackEncoding;
    }): Promise<Omit<CallBack, 'callback_url' | 'enable_raw' | 'enable_events' | 'type' | 'encoding' | 'created_at' | 'updated_at'>>;
    list(): Promise<CallBack[]>;
    addAddresses(input: {
        id: string;
        addresses: string[];
    }): Promise<Omit<CallBack, 'callback_url' | 'enable_raw'>>;
    removeAddresses(input: {
        id: string;
        addresses: string[];
    }): Promise<Omit<CallBack, 'callback_url' | 'enable_raw'>>;
    private isValidUrl;
}
