import { restApiCall } from '../utils';
export class WalletClient {
    constructor(config) {
        this.config = config;
    }
    async getBalance(input) {
        var _a;
        try {
            const params = {
                network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                wallet: input.wallet,
            };
            const data = await restApiCall(this.config.apiKey, {
                method: 'get',
                url: 'wallet/balance',
                params,
            });
            const balance = data.result.balance;
            return balance;
        }
        catch (error) {
            throw error;
        }
    }
    async sendSol(input) {
        var _a;
        try {
            const reqBody = {
                network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                from_address: input.fromAddress,
                to_address: input.toAddress,
                amount: input.amount,
            };
            const data = await restApiCall(this.config.apiKey, {
                method: 'post',
                url: 'wallet/send_sol',
                data: reqBody,
            });
            const encodedTransaction = data.result.encoded_transaction;
            return encodedTransaction;
        }
        catch (error) {
            throw error;
        }
    }
    async getTokenBalance(input) {
        var _a;
        try {
            const params = {
                network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                wallet: input.wallet,
                token: input.token,
            };
            const data = await restApiCall(this.config.apiKey, {
                method: 'get',
                url: 'wallet/token_balance',
                params,
            });
            const tokenBalances = data.result;
            return tokenBalances;
        }
        catch (error) {
            throw error;
        }
    }
    async getAllTokenBalance(input) {
        var _a;
        try {
            const params = {
                network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                wallet: input.wallet,
            };
            const data = await restApiCall(this.config.apiKey, {
                method: 'get',
                url: 'wallet/all_tokens',
                params,
            });
            const tokenBalances = data.result;
            return tokenBalances;
        }
        catch (error) {
            throw error;
        }
    }
    async getPortfolio(input) {
        var _a;
        try {
            const params = {
                network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                wallet: input.wallet,
            };
            const data = await restApiCall(this.config.apiKey, {
                method: 'get',
                url: 'wallet/get_portfolio',
                params,
            });
            const portfolio = data.result;
            return portfolio;
        }
        catch (error) {
            throw error;
        }
    }
    async getDomains(input) {
        var _a;
        try {
            const params = {
                network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                wallet: input.wallet,
            };
            const data = await restApiCall(this.config.apiKey, {
                method: 'get',
                url: 'wallet/get_domains',
                params,
            });
            const domains = data.result;
            return domains;
        }
        catch (error) {
            throw error;
        }
    }
    async resolveDomainByAddress(input) {
        var _a;
        try {
            const params = {
                network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                address: input.address,
            };
            const data = await restApiCall(this.config.apiKey, {
                method: 'get',
                url: 'wallet/resolve_address',
                params,
            });
            const domain = data.result.name;
            return domain;
        }
        catch (error) {
            throw error;
        }
    }
    async collections(input) {
        var _a;
        try {
            const params = {
                network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                wallet_address: input.wallet,
            };
            const data = await restApiCall(this.config.apiKey, {
                method: 'get',
                url: 'wallet/collections',
                params,
            });
            const collections = data.result.collections;
            return collections;
        }
        catch (error) {
            throw error;
        }
    }
    async transactionHistory(input) {
        var _a;
        try {
            const params = {
                network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                wallet: input.wallet,
                tx_num: input.limit ? input.limit : 10,
            };
            if (input === null || input === void 0 ? void 0 : input.beforeTxSignature) {
                params['before_tx_signature'] = input.beforeTxSignature;
            }
            const data = await restApiCall(this.config.apiKey, {
                method: 'get',
                url: 'wallet/transaction_history',
                params,
            });
            const trsnsactions = data.result;
            return trsnsactions;
        }
        catch (error) {
            throw error;
        }
    }
    async transaction(input) {
        var _a;
        try {
            const params = {
                network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                txn_signature: input.txnSignature,
            };
            const data = await restApiCall(this.config.apiKey, {
                method: 'get',
                url: 'wallet/transaction',
                params,
            });
            const trsnsaction = data.result;
            return trsnsaction;
        }
        catch (error) {
            throw error;
        }
    }
    async parsedTransactionHistory(input) {
        var _a;
        try {
            const params = {
                network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                account: input.wallet,
                tx_num: input.limit ? input.limit : 10,
            };
            if (input === null || input === void 0 ? void 0 : input.beforeTxSignature) {
                params['before_tx_signature'] = input.beforeTxSignature;
            }
            const data = await restApiCall(this.config.apiKey, {
                method: 'get',
                url: 'wallet/parsed_transaction_history',
                params,
            });
            const trsnsactions = data.result;
            return trsnsactions;
        }
        catch (error) {
            throw error;
        }
    }
}
//# sourceMappingURL=wallet-client.js.map