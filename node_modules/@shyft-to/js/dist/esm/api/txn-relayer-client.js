import { restApiCall } from '../utils';
export class TxnRelayerClient {
    constructor(config) {
        this.config = config;
    }
    async getOrCreate() {
        const data = await restApiCall(this.config.apiKey, {
            method: 'post',
            url: 'txn_relayer/create',
        });
        const wallet = data.result.wallet;
        return wallet;
    }
    async sign(input) {
        var _a, _b;
        const reqBody = {
            network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
            encoded_transaction: input.encodedTransaction,
        };
        const data = await restApiCall(this.config.apiKey, {
            method: 'post',
            url: 'txn_relayer/sign',
            data: reqBody,
        });
        const result = (_b = data.result) === null || _b === void 0 ? void 0 : _b.tx;
        return result;
    }
    async signMany(input) {
        var _a;
        if (input.encodedTransactions.length > 50 ||
            input.encodedTransactions.length < 1) {
            throw new Error('allowed between 1 to 50: encodedTransactions');
        }
        const reqBody = {
            network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
            encoded_transactions: input.encodedTransactions,
        };
        if (input === null || input === void 0 ? void 0 : input.commitment) {
            reqBody['commitment'] = input.commitment;
        }
        const data = await restApiCall(this.config.apiKey, {
            method: 'post',
            url: 'txn_relayer/sign_many',
            data: reqBody,
        });
        const result = data.result;
        return result;
    }
}
//# sourceMappingURL=txn-relayer-client.js.map