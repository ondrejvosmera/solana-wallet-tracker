import { ShyftConfig } from '../utils';
import { TokenApiResponse, Network, TokenInfo, TokenOwners, TokenTransferTo, AirdropTokenResponse } from '../types';
export declare class TokenClient {
    private readonly config;
    constructor(config: ShyftConfig);
    getInfo(input: {
        network?: Network;
        tokenAddress: string;
    }): Promise<TokenInfo>;
    getOwners(input: {
        network?: Network;
        tokenAddress: string;
        limit?: number;
        offset?: number;
    }): Promise<TokenOwners>;
    create(input: {
        network?: Network;
        creatorWallet: string;
        name: string;
        symbol: string;
        description?: string;
        decimals: number;
        image: File;
        feePayer?: string;
    }): Promise<TokenApiResponse>;
    mint(input: {
        network?: Network;
        mintAuthority: string;
        receiver: string;
        tokenAddress: string;
        amount: number;
        message?: string;
        feePayer?: string;
    }): Promise<TokenApiResponse>;
    burn(input: {
        network?: Network;
        wallet: string;
        tokenAddress: string;
        amount: number;
        feePayer?: string;
    }): Promise<Omit<TokenApiResponse, 'mint'>>;
    transfer(input: {
        network?: Network;
        fromAddress: string;
        toAddress: string;
        tokenAddress: string;
        amount: number;
        feePayer?: string;
    }): Promise<Omit<TokenApiResponse, 'mint'>>;
    airdrop(input: {
        network?: Network;
        fromAddress: string;
        tokenAddress: string;
        transferTo: TokenTransferTo[];
    }): Promise<AirdropTokenResponse>;
}
