import { rpcCall } from '../utils/rpc-call';
export class RpcClient {
    constructor(connection) {
        this.connection = connection;
        this.id = 'shyft-sdk';
    }
    async getLatestBlockhash(commitmentOrConfig = 'finalized') {
        return this.connection.getLatestBlockhash(commitmentOrConfig);
    }
    async getAsset(params) {
        try {
            const data = await rpcCall(this.connection, {
                data: {
                    jsonrpc: '2.0',
                    id: this.id,
                    method: 'getAsset',
                    params,
                },
            });
            if (data['error']) {
                return data['error'];
            }
            const result = data.result;
            return result;
        }
        catch (error) {
            throw new Error(`Error in getAsset: ${error}`);
        }
    }
    async getAssetProof(params) {
        try {
            const data = await rpcCall(this.connection, {
                data: {
                    jsonrpc: '2.0',
                    id: this.id,
                    method: 'getAssetProof',
                    params: params,
                },
            });
            if (data['error']) {
                return data['error'];
            }
            const result = data.result;
            return result;
        }
        catch (error) {
            throw new Error(`Error in getAssetProof: ${error}`);
        }
    }
    async getAssetsByGroup(params) {
        try {
            const data = await rpcCall(this.connection, {
                data: {
                    jsonrpc: '2.0',
                    id: this.id,
                    method: 'getAssetsByGroup',
                    params: params,
                },
            });
            if (data['error']) {
                return data['error'];
            }
            const result = data.result;
            return result;
        }
        catch (error) {
            throw new Error(`Error in getAssetsByGroup: ${error}`);
        }
    }
    async getAssetsByOwner(params) {
        try {
            const data = await rpcCall(this.connection, {
                data: {
                    jsonrpc: '2.0',
                    id: this.id,
                    method: 'getAssetsByOwner',
                    params: params,
                },
            });
            if (data['error']) {
                return data['error'];
            }
            const result = data.result;
            return result;
        }
        catch (error) {
            throw new Error(`Error in getAssetsByOwner: ${error}`);
        }
    }
    async getAssetsByCreator(params) {
        try {
            const data = await rpcCall(this.connection, {
                data: {
                    jsonrpc: '2.0',
                    id: this.id,
                    method: 'getAssetsByCreator',
                    params: params,
                },
            });
            if (data['error']) {
                return data['error'];
            }
            const result = data.result;
            return result;
        }
        catch (error) {
            throw new Error(`Error in getAssetsByCreator: ${error}`);
        }
    }
    async getAssetsByAuthority(params) {
        try {
            const data = await rpcCall(this.connection, {
                data: {
                    jsonrpc: '2.0',
                    id: this.id,
                    method: 'getAssetsByAuthority',
                    params: params,
                },
            });
            if (data['error']) {
                return data['error'];
            }
            const result = data.result;
            return result;
        }
        catch (error) {
            throw new Error(`Error in getAssetsByAuthority: ${error}`);
        }
    }
    async searchAssets(params) {
        try {
            const data = await rpcCall(this.connection, {
                data: {
                    jsonrpc: '2.0',
                    id: this.id,
                    method: 'searchAssets',
                    params: params,
                },
            });
            if (data['error']) {
                return data['error'];
            }
            const result = data.result;
            return result;
        }
        catch (error) {
            throw new Error(`Error in searchAssets: ${error}`);
        }
    }
}
//# sourceMappingURL=rpc-client.js.map