import { ShyftConfig } from '../utils';
import { BulkItemSettings, CandyMachineGroup, CandyMachineGuard, CandyMachineItem, CandyMachineProgram, CreateCandyMachineResp, Creator, InsertCandyMachineResp, ItemSettings, MintCandyMachineResp, Network, PaginatedNftResponse } from '../types';
export declare class CandyMachineClient {
    private readonly config;
    private caseConverter;
    constructor(config: ShyftConfig);
    readMints(input: {
        network?: Network;
        address: string;
        version?: CandyMachineProgram;
    }): Promise<string[]>;
    readNfts(input: {
        network?: Network;
        address: string;
        version?: CandyMachineProgram;
        page?: number;
        size?: number;
    }): Promise<PaginatedNftResponse>;
    create(input: {
        network?: Network;
        wallet: string;
        feePayer?: string;
        symbol: string;
        maxSupply?: number;
        royalty?: number;
        itemsAvailable: number;
        amount?: number;
        collection: string;
        bulkItemSettings?: BulkItemSettings;
        itemSettings?: ItemSettings;
        creators?: Omit<Creator, 'verified'>[];
        guards?: CandyMachineGuard;
        groups?: CandyMachineGroup[];
    }): Promise<CreateCandyMachineResp>;
    insert(input: {
        network?: Network;
        wallet: string;
        candyMachine: string;
        index?: number;
        items: CandyMachineItem[];
    }): Promise<InsertCandyMachineResp>;
    mint(input: {
        network?: Network;
        wallet: string;
        candyMachine: string;
        authority: string;
        mintGroup?: string;
        feePayer?: string;
        guardSettings?: Partial<CandyMachineGuard>;
    }): Promise<MintCandyMachineResp>;
    monitor(input: {
        network?: Network;
        candyMachine: string;
    }): Promise<boolean>;
    unmonitor(input: {
        network?: Network;
        candyMachine: string;
    }): Promise<boolean>;
}
