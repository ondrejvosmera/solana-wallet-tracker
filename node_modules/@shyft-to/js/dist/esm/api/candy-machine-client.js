import { CaseConverter } from '../utils';
import { restApiCall } from '../utils';
export class CandyMachineClient {
    constructor(config) {
        this.config = config;
        this.caseConverter = new CaseConverter();
    }
    async readMints(input) {
        var _a;
        try {
            const params = {
                network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                address: input.address,
            };
            if (input.version) {
                params['version'] = input.version;
            }
            const data = await restApiCall(this.config.apiKey, {
                method: 'get',
                url: 'candy_machine/nft_addresses',
                params,
            });
            const mints = data.result;
            return mints;
        }
        catch (error) {
            throw error;
        }
    }
    async readNfts(input) {
        var _a;
        try {
            const params = {
                network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                address: input.address,
            };
            if (input.page) {
                params['page'] = input.page;
            }
            if (input.size) {
                params['size'] = input.size;
            }
            if (input.version) {
                params['version'] = input.version;
            }
            const data = await restApiCall(this.config.apiKey, {
                method: 'get',
                url: 'candy_machine/nft_addresses',
                params,
            });
            const response = data.result;
            return response;
        }
        catch (error) {
            throw error;
        }
    }
    async create(input) {
        var _a;
        try {
            const reqBody = {
                network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                wallet: input.wallet,
                symbol: input.symbol,
                items_available: input.itemsAvailable,
                collection: input.collection,
            };
            if (input === null || input === void 0 ? void 0 : input.feePayer) {
                reqBody['fee_payer'] = input.feePayer;
            }
            if (input === null || input === void 0 ? void 0 : input.maxSupply) {
                reqBody['max_supply'] = input.maxSupply;
            }
            if (input === null || input === void 0 ? void 0 : input.royalty) {
                reqBody['royalty'] = input.royalty;
            }
            if (input === null || input === void 0 ? void 0 : input.amount) {
                reqBody['amount'] = input.amount;
            }
            if (input === null || input === void 0 ? void 0 : input.bulkItemSettings) {
                reqBody['bulk_item_settings'] = input.bulkItemSettings;
            }
            if (input === null || input === void 0 ? void 0 : input.itemSettings) {
                reqBody['item_settings'] = this.caseConverter.convertToSnakeCaseObject(input.itemSettings);
            }
            if (input === null || input === void 0 ? void 0 : input.creators) {
                reqBody['creators'] = input.creators;
            }
            if (input === null || input === void 0 ? void 0 : input.creators) {
                reqBody['creators'] = input.creators;
            }
            if (input === null || input === void 0 ? void 0 : input.guards) {
                reqBody['guards'] = input.guards;
            }
            if (input === null || input === void 0 ? void 0 : input.groups) {
                reqBody['groups'] = input.groups;
            }
            const response = await restApiCall(this.config.apiKey, {
                method: 'post',
                url: 'candy_machine/create',
                data: reqBody,
            });
            const candyMachineAndTx = response.result;
            return candyMachineAndTx;
        }
        catch (error) {
            throw error;
        }
    }
    async insert(input) {
        var _a;
        try {
            const reqBody = {
                network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                wallet: input.wallet,
                candy_machine: input.candyMachine,
                items: input.items,
            };
            if (input === null || input === void 0 ? void 0 : input.index) {
                reqBody['index'] = input.index;
            }
            if (input.items.length === 0) {
                throw new Error('Atleast insert one item!');
            }
            const response = await restApiCall(this.config.apiKey, {
                method: 'post',
                url: 'candy_machine/insert',
                data: reqBody,
            });
            const candyMachineAndTx = response.result;
            return candyMachineAndTx;
        }
        catch (error) {
            throw error;
        }
    }
    async mint(input) {
        var _a;
        try {
            const reqBody = {
                network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                wallet: input.wallet,
                candy_machine: input.candyMachine,
                authority: input.authority,
            };
            if (input === null || input === void 0 ? void 0 : input.mintGroup) {
                reqBody['mint_group'] = input.mintGroup;
            }
            if (input === null || input === void 0 ? void 0 : input.feePayer) {
                reqBody['fee_payer'] = input.feePayer;
            }
            if (input === null || input === void 0 ? void 0 : input.guardSettings) {
                reqBody['guard_settings'] = input.guardSettings;
            }
            const response = await restApiCall(this.config.apiKey, {
                method: 'post',
                url: 'candy_machine/mint',
                data: reqBody,
            });
            const mintAndTx = response.result;
            return mintAndTx;
        }
        catch (error) {
            throw error;
        }
    }
    async monitor(input) {
        var _a;
        try {
            const reqBody = {
                network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                address: input.candyMachine,
            };
            const response = await restApiCall(this.config.apiKey, {
                method: 'post',
                url: 'candy_machine/monitor',
                data: reqBody,
            });
            const isMonitored = response.success;
            return isMonitored;
        }
        catch (error) {
            throw error;
        }
    }
    async unmonitor(input) {
        var _a;
        try {
            const reqBody = {
                network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                address: input.candyMachine,
            };
            const response = await restApiCall(this.config.apiKey, {
                method: 'delete',
                url: 'candy_machine/unmonitor',
                data: reqBody,
            });
            const isUnmonitored = response.success;
            return isUnmonitored;
        }
        catch (error) {
            throw error;
        }
    }
}
//# sourceMappingURL=candy-machine-client.js.map