"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MpListingClient = void 0;
const utils_1 = require("../utils");
class MpListingClient {
    constructor(config) {
        this.config = config;
    }
    active(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    marketplace_address: input.marketplaceAddress,
                };
                if (input === null || input === void 0 ? void 0 : input.sellerAddress) {
                    params['seller_address'] = input.sellerAddress;
                }
                if (input === null || input === void 0 ? void 0 : input.collectionAddress) {
                    params['collection_address'] = input.collectionAddress;
                }
                if (input === null || input === void 0 ? void 0 : input.nftAddress) {
                    params['nft_address'] = input.nftAddress;
                }
                if (input === null || input === void 0 ? void 0 : input.sortBy) {
                    params['sort_by'] = input.sortBy;
                }
                if (input === null || input === void 0 ? void 0 : input.sortOrder) {
                    params['sort_order'] = input.sortOrder;
                }
                if (input === null || input === void 0 ? void 0 : input.page) {
                    params['page'] = input.page;
                }
                if (input === null || input === void 0 ? void 0 : input.size) {
                    params['size'] = input.size;
                }
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'marketplace/active_listings',
                    params,
                }, 'v2');
                const listedNfts = data.result;
                listedNfts.data.forEach((x) => {
                    x.created_at = new Date(x.created_at);
                });
                return listedNfts;
            }
            catch (error) {
                throw error;
            }
        });
    }
    detail(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    marketplace_address: input.marketplaceAddress,
                    list_state: input.listState,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'marketplace/list_details',
                    params,
                });
                const listedNft = data.result;
                listedNft.created_at = new Date(listedNft.created_at);
                if (listedNft === null || listedNft === void 0 ? void 0 : listedNft.cancelled_at) {
                    listedNft.cancelled_at = new Date(listedNft.cancelled_at);
                }
                return listedNft;
            }
            catch (error) {
                throw error;
            }
        });
    }
    bySeller(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    marketplace_address: input.marketplaceAddress,
                    seller_address: input.sellerAddress,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'marketplace/seller_listings',
                    params,
                });
                const listedNfts = data.result;
                listedNfts.forEach((x) => {
                    x.created_at = new Date(x.created_at);
                    if (x === null || x === void 0 ? void 0 : x.cancelled_at) {
                        x.cancelled_at = new Date(x.cancelled_at);
                    }
                });
                return listedNfts;
            }
            catch (error) {
                throw error;
            }
        });
    }
    activeSellers(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    marketplace_address: input.marketplaceAddress,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'marketplace/active_sellers',
                    params,
                });
                const sellers = data.result;
                return sellers;
            }
            catch (error) {
                throw error;
            }
        });
    }
    list(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const reqBody = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    marketplace_address: input.marketplaceAddress,
                    nft_address: input.nftAddress,
                    price: input.price,
                    seller_wallet: input.sellerWallet,
                };
                if (input === null || input === void 0 ? void 0 : input.isGasLess) {
                    reqBody['on_the_house'] = input.isGasLess;
                }
                if (input === null || input === void 0 ? void 0 : input.serviceCharge) {
                    reqBody['service_charge'] = input.serviceCharge;
                }
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'post',
                    url: 'marketplace/list',
                    data: reqBody,
                });
                const response = data.result;
                return response;
            }
            catch (error) {
                throw error;
            }
        });
    }
    unlist(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const reqBody = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    marketplace_address: input.marketplaceAddress,
                    list_state: input.listState,
                    seller_wallet: input.sellerWallet,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'post',
                    url: 'marketplace/unlist',
                    data: reqBody,
                });
                const encodedTransaction = data.result.encoded_transaction;
                return encodedTransaction;
            }
            catch (error) {
                throw error;
            }
        });
    }
    buy(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const reqBody = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    marketplace_address: input.marketplaceAddress,
                    nft_address: input.nftAddress,
                    price: input.price,
                    seller_address: input.sellerWallet,
                    buyer_wallet: input.buyerWallet,
                };
                if (input === null || input === void 0 ? void 0 : input.serviceCharge) {
                    reqBody['service_charge'] = input.serviceCharge;
                }
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'post',
                    url: 'marketplace/buy',
                    data: reqBody,
                });
                const response = data.result;
                return response;
            }
            catch (error) {
                throw error;
            }
        });
    }
}
exports.MpListingClient = MpListingClient;
//# sourceMappingURL=mp-listing-client.js.map