import { ShyftConfig } from '../utils';
import { Network, ParsedTxnSummary, RawTransaction, SendTransactionResp, TransactionHistory, TxnCommitment } from '../types';
export declare class TransactionClient {
    private readonly config;
    constructor(config: ShyftConfig);
    raw(input: {
        network?: Network;
        txnSignature: string;
    }): Promise<RawTransaction>;
    parsed(input: {
        network?: Network;
        txnSignature: string;
    }): Promise<ParsedTxnSummary>;
    history(input: {
        network?: Network;
        account: string;
        txNum?: number;
        beforeTxSignature?: string;
        enableRaw?: boolean;
        enableEvents?: boolean;
    }): Promise<TransactionHistory>;
    parseSelected(input: {
        network?: Network;
        transactionSignatues: string[];
        enableRaw?: boolean;
        enableEvents?: boolean;
    }): Promise<TransactionHistory>;
    send(input: {
        network?: Network;
        encodedTransaction: string;
    }): Promise<string>;
    sendMany(input: {
        network?: Network;
        encodedTransactions: string[];
        commitment?: TxnCommitment;
    }): Promise<SendTransactionResp[]>;
}
