"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarketplaceClient = void 0;
const utils_1 = require("../utils");
const mp_listing_client_1 = require("./mp-listing-client");
const mp_bidding_client_1 = require("./mp-bidding-client");
const WRAPPED_SOL_ADDRESS = 'So11111111111111111111111111111111111111112';
class MarketplaceClient {
    constructor(config) {
        this.config = config;
        this.listing = new mp_listing_client_1.MpListingClient(this.config);
        this.bidding = new mp_bidding_client_1.MpBiddingClient(this.config);
    }
    create(input) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (typeof (input === null || input === void 0 ? void 0 : input.transactionFee) === 'number' &&
                    (input.transactionFee > 100 || input.transactionFee < 0)) {
                    throw new Error('transactionFee should not be greater than 100 or lower than 0');
                }
                const reqBody = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    creator_wallet: input.creatorWallet,
                    transaction_fee: (_b = input === null || input === void 0 ? void 0 : input.transactionFee) !== null && _b !== void 0 ? _b : 0,
                };
                if (input === null || input === void 0 ? void 0 : input.authorityAddress) {
                    reqBody['authority_address'] = input.authorityAddress;
                }
                if (input === null || input === void 0 ? void 0 : input.currencyAddress) {
                    reqBody['currency_address'] = input.currencyAddress;
                }
                if (input === null || input === void 0 ? void 0 : input.feePayer) {
                    reqBody['fee_payer'] = input.feePayer;
                }
                if (input === null || input === void 0 ? void 0 : input.feeRecipient) {
                    reqBody['fee_recipient'] = input.feeRecipient;
                }
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'post',
                    url: 'marketplace/create',
                    data: reqBody,
                });
                const response = data.result;
                return response;
            }
            catch (error) {
                throw error;
            }
        });
    }
    update(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const reqBody = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    authority_wallet: input.authorityWallet,
                    marketplace_address: input.marketplaceAddress,
                };
                if (input === null || input === void 0 ? void 0 : input.newAuthorityAddress) {
                    reqBody['new_authority_address'] = input.newAuthorityAddress;
                }
                if (input === null || input === void 0 ? void 0 : input.transactionFee) {
                    reqBody['transaction_fee'] = input.transactionFee;
                }
                if (input === null || input === void 0 ? void 0 : input.feePayer) {
                    reqBody['fee_payer'] = input.feePayer;
                }
                if (input === null || input === void 0 ? void 0 : input.feeRecipient) {
                    reqBody['fee_recipient'] = input.feeRecipient;
                }
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'post',
                    url: 'marketplace/update',
                    data: reqBody,
                });
                const response = data.result;
                return response;
            }
            catch (error) {
                throw error;
            }
        });
    }
    find(input) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    authority_address: input.authorityAddress,
                    currency_address: (_b = input === null || input === void 0 ? void 0 : input.currencyAddress) !== null && _b !== void 0 ? _b : WRAPPED_SOL_ADDRESS,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'marketplace/find',
                    params,
                });
                const response = data.result;
                return response;
            }
            catch (error) {
                throw error;
            }
        });
    }
    treasuryBalance(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    marketplace_address: input.marketplaceAddress,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'marketplace/treasury_balance',
                    params,
                });
                const treasuryBalance = data.result;
                return treasuryBalance;
            }
            catch (error) {
                throw error;
            }
        });
    }
    stats(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    marketplace_address: input.marketplaceAddress,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'marketplace/stats',
                    params,
                });
                const stats = data.result;
                stats.start_date = new Date(stats.start_date);
                stats.end_date = new Date(stats.end_date);
                return stats;
            }
            catch (error) {
                throw error;
            }
        });
    }
    withdrawFee(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const reqBody = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    marketplace_address: input.marketplaceAddress,
                    authority_wallet: input.authorityWallet,
                    amount: input.amount,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'post',
                    url: 'marketplace/withdraw_fee',
                    data: reqBody,
                });
                const withdrawFeeTxn = data.result;
                return withdrawFeeTxn;
            }
            catch (error) {
                throw error;
            }
        });
    }
}
exports.MarketplaceClient = MarketplaceClient;
//# sourceMappingURL=marketplace-client.js.map