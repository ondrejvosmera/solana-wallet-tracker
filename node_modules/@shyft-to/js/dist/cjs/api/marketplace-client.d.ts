import { ShyftConfig } from '../utils';
import { Marketplace, MarketplaceStats, Network, TreasuryBalance, WithdrawFeeTxn } from '../types';
import { MpListingClient } from './mp-listing-client';
import { MpBiddingClient } from './mp-bidding-client';
export declare class MarketplaceClient {
    private readonly config;
    readonly listing: MpListingClient;
    readonly bidding: MpBiddingClient;
    constructor(config: ShyftConfig);
    create(input: {
        network?: Network;
        creatorWallet: string;
        authorityAddress?: string;
        currencyAddress?: string;
        feePayer?: string;
        feeRecipient?: string;
        transactionFee?: number;
    }): Promise<Marketplace & {
        encoded_transaction: string;
    }>;
    update(input: {
        network?: Network;
        authorityWallet: string;
        marketplaceAddress: string;
        newAuthorityAddress?: string;
        feePayer?: string;
        feeRecipient?: string;
        transactionFee?: number;
    }): Promise<Marketplace & {
        encoded_transaction: string;
    }>;
    find(input: {
        network?: Network;
        authorityAddress: string;
        currencyAddress?: string;
    }): Promise<Marketplace>;
    treasuryBalance(input: {
        network?: Network;
        marketplaceAddress: string;
    }): Promise<TreasuryBalance>;
    stats(input: {
        network?: Network;
        marketplaceAddress: string;
        startDate?: Date;
        endDate?: Date;
    }): Promise<MarketplaceStats>;
    withdrawFee(input: {
        network?: Network;
        marketplaceAddress: string;
        authorityWallet: string;
        amount: number;
    }): Promise<WithdrawFeeTxn>;
}
