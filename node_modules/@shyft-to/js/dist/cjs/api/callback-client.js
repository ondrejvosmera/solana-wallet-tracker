"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallbackClient = void 0;
const utils_1 = require("../utils");
class CallbackClient {
    constructor(config) {
        this.config = config;
    }
    register(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.isValidUrl(input.callbackUrl)) {
                    throw new Error(`not a valid URL: ${input.callbackUrl}`);
                }
                const reqBody = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    addresses: input.addresses,
                    callback_url: input.callbackUrl,
                };
                if (input === null || input === void 0 ? void 0 : input.events) {
                    reqBody['events'] = input.events;
                }
                if (input === null || input === void 0 ? void 0 : input.enableRaw) {
                    reqBody['enable_raw'] = input.enableRaw;
                }
                if (input === null || input === void 0 ? void 0 : input.enableEvents) {
                    reqBody['enable_events'] = input.enableEvents;
                }
                if (input === null || input === void 0 ? void 0 : input.type) {
                    reqBody['type'] = input.type;
                }
                if (input === null || input === void 0 ? void 0 : input.encoding) {
                    reqBody['encoding'] = input.encoding;
                }
                const response = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'post',
                    url: 'callback/create',
                    data: reqBody,
                });
                const callback = response.result;
                return callback;
            }
            catch (error) {
                throw error;
            }
        });
    }
    remove(input) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const reqBody = {
                    id: input.id,
                };
                const response = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'delete',
                    url: 'callback/remove',
                    data: reqBody,
                });
                const isRemoved = response.success;
                return isRemoved;
            }
            catch (error) {
                throw error;
            }
        });
    }
    update(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.isValidUrl(input.callbackUrl)) {
                    throw new Error(`not a valid URL: ${input.callbackUrl}`);
                }
                const reqBody = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    id: input.id,
                    addresses: input.addresses,
                    callback_url: input.callbackUrl,
                };
                if (input === null || input === void 0 ? void 0 : input.events) {
                    reqBody['events'] = input.events;
                }
                if (input === null || input === void 0 ? void 0 : input.enableRaw) {
                    reqBody['enable_raw'] = input.enableRaw;
                }
                if (input === null || input === void 0 ? void 0 : input.enableEvents) {
                    reqBody['enable_events'] = input.enableEvents;
                }
                if (input === null || input === void 0 ? void 0 : input.type) {
                    reqBody['type'] = input.type;
                }
                if (input === null || input === void 0 ? void 0 : input.encoding) {
                    reqBody['encoding'] = input.encoding;
                }
                const response = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'post',
                    url: 'callback/update',
                    data: reqBody,
                });
                const callback = response.result;
                return callback;
            }
            catch (error) {
                throw error;
            }
        });
    }
    list() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'callback/list',
                });
                const callbacks = response.result.map((callback) => {
                    return {
                        id: callback === null || callback === void 0 ? void 0 : callback._id,
                        network: callback === null || callback === void 0 ? void 0 : callback.network,
                        addresses: callback === null || callback === void 0 ? void 0 : callback.addresses,
                        callback_url: callback === null || callback === void 0 ? void 0 : callback.callback_url,
                        events: callback === null || callback === void 0 ? void 0 : callback.events,
                        enable_raw: callback === null || callback === void 0 ? void 0 : callback.enable_raw,
                        enable_events: callback === null || callback === void 0 ? void 0 : callback.enable_events,
                        type: callback === null || callback === void 0 ? void 0 : callback.type,
                        encoding: callback === null || callback === void 0 ? void 0 : callback.encoding,
                        created_at: new Date(callback.created_at),
                        updated_at: new Date(callback.updated_at),
                    };
                });
                return callbacks;
            }
            catch (error) {
                throw error;
            }
        });
    }
    addAddresses(input) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const reqBody = {
                    id: input.id,
                    addresses: input.addresses,
                };
                const response = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'post',
                    url: 'callback/add-addresses',
                    data: reqBody,
                });
                const callback = response.result;
                return callback;
            }
            catch (error) {
                throw error;
            }
        });
    }
    removeAddresses(input) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const reqBody = {
                    id: input.id,
                    addresses: input.addresses,
                };
                const response = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'post',
                    url: 'callback/remove-addresses',
                    data: reqBody,
                });
                const callback = response.result;
                return callback;
            }
            catch (error) {
                throw error;
            }
        });
    }
    isValidUrl(url) {
        try {
            new URL(url);
            return true;
        }
        catch (err) {
            return false;
        }
    }
}
exports.CallbackClient = CallbackClient;
//# sourceMappingURL=callback-client.js.map