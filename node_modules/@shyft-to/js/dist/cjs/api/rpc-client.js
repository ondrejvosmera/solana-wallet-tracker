"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcClient = void 0;
const rpc_call_1 = require("../utils/rpc-call");
class RpcClient {
    constructor(connection) {
        this.connection = connection;
        this.id = 'shyft-sdk';
    }
    getLatestBlockhash(commitmentOrConfig = 'finalized') {
        return __awaiter(this, void 0, void 0, function* () {
            return this.connection.getLatestBlockhash(commitmentOrConfig);
        });
    }
    getAsset(params) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield (0, rpc_call_1.rpcCall)(this.connection, {
                    data: {
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'getAsset',
                        params,
                    },
                });
                if (data['error']) {
                    return data['error'];
                }
                const result = data.result;
                return result;
            }
            catch (error) {
                throw new Error(`Error in getAsset: ${error}`);
            }
        });
    }
    getAssetProof(params) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield (0, rpc_call_1.rpcCall)(this.connection, {
                    data: {
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'getAssetProof',
                        params: params,
                    },
                });
                if (data['error']) {
                    return data['error'];
                }
                const result = data.result;
                return result;
            }
            catch (error) {
                throw new Error(`Error in getAssetProof: ${error}`);
            }
        });
    }
    getAssetsByGroup(params) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield (0, rpc_call_1.rpcCall)(this.connection, {
                    data: {
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'getAssetsByGroup',
                        params: params,
                    },
                });
                if (data['error']) {
                    return data['error'];
                }
                const result = data.result;
                return result;
            }
            catch (error) {
                throw new Error(`Error in getAssetsByGroup: ${error}`);
            }
        });
    }
    getAssetsByOwner(params) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield (0, rpc_call_1.rpcCall)(this.connection, {
                    data: {
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'getAssetsByOwner',
                        params: params,
                    },
                });
                if (data['error']) {
                    return data['error'];
                }
                const result = data.result;
                return result;
            }
            catch (error) {
                throw new Error(`Error in getAssetsByOwner: ${error}`);
            }
        });
    }
    getAssetsByCreator(params) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield (0, rpc_call_1.rpcCall)(this.connection, {
                    data: {
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'getAssetsByCreator',
                        params: params,
                    },
                });
                if (data['error']) {
                    return data['error'];
                }
                const result = data.result;
                return result;
            }
            catch (error) {
                throw new Error(`Error in getAssetsByCreator: ${error}`);
            }
        });
    }
    getAssetsByAuthority(params) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield (0, rpc_call_1.rpcCall)(this.connection, {
                    data: {
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'getAssetsByAuthority',
                        params: params,
                    },
                });
                if (data['error']) {
                    return data['error'];
                }
                const result = data.result;
                return result;
            }
            catch (error) {
                throw new Error(`Error in getAssetsByAuthority: ${error}`);
            }
        });
    }
    searchAssets(params) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield (0, rpc_call_1.rpcCall)(this.connection, {
                    data: {
                        jsonrpc: '2.0',
                        id: this.id,
                        method: 'searchAssets',
                        params: params,
                    },
                });
                if (data['error']) {
                    return data['error'];
                }
                const result = data.result;
                return result;
            }
            catch (error) {
                throw new Error(`Error in searchAssets: ${error}`);
            }
        });
    }
}
exports.RpcClient = RpcClient;
//# sourceMappingURL=rpc-client.js.map