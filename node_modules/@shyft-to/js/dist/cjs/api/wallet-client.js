"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletClient = void 0;
const utils_1 = require("../utils");
class WalletClient {
    constructor(config) {
        this.config = config;
    }
    getBalance(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    wallet: input.wallet,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'wallet/balance',
                    params,
                });
                const balance = data.result.balance;
                return balance;
            }
            catch (error) {
                throw error;
            }
        });
    }
    sendSol(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const reqBody = {
                    network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    from_address: input.fromAddress,
                    to_address: input.toAddress,
                    amount: input.amount,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'post',
                    url: 'wallet/send_sol',
                    data: reqBody,
                });
                const encodedTransaction = data.result.encoded_transaction;
                return encodedTransaction;
            }
            catch (error) {
                throw error;
            }
        });
    }
    getTokenBalance(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    wallet: input.wallet,
                    token: input.token,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'wallet/token_balance',
                    params,
                });
                const tokenBalances = data.result;
                return tokenBalances;
            }
            catch (error) {
                throw error;
            }
        });
    }
    getAllTokenBalance(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    wallet: input.wallet,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'wallet/all_tokens',
                    params,
                });
                const tokenBalances = data.result;
                return tokenBalances;
            }
            catch (error) {
                throw error;
            }
        });
    }
    getPortfolio(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    wallet: input.wallet,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'wallet/get_portfolio',
                    params,
                });
                const portfolio = data.result;
                return portfolio;
            }
            catch (error) {
                throw error;
            }
        });
    }
    getDomains(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    wallet: input.wallet,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'wallet/get_domains',
                    params,
                });
                const domains = data.result;
                return domains;
            }
            catch (error) {
                throw error;
            }
        });
    }
    resolveDomainByAddress(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    address: input.address,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'wallet/resolve_address',
                    params,
                });
                const domain = data.result.name;
                return domain;
            }
            catch (error) {
                throw error;
            }
        });
    }
    collections(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    wallet_address: input.wallet,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'wallet/collections',
                    params,
                });
                const collections = data.result.collections;
                return collections;
            }
            catch (error) {
                throw error;
            }
        });
    }
    transactionHistory(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    wallet: input.wallet,
                    tx_num: input.limit ? input.limit : 10,
                };
                if (input === null || input === void 0 ? void 0 : input.beforeTxSignature) {
                    params['before_tx_signature'] = input.beforeTxSignature;
                }
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'wallet/transaction_history',
                    params,
                });
                const trsnsactions = data.result;
                return trsnsactions;
            }
            catch (error) {
                throw error;
            }
        });
    }
    transaction(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    txn_signature: input.txnSignature,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'wallet/transaction',
                    params,
                });
                const trsnsaction = data.result;
                return trsnsaction;
            }
            catch (error) {
                throw error;
            }
        });
    }
    parsedTransactionHistory(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    account: input.wallet,
                    tx_num: input.limit ? input.limit : 10,
                };
                if (input === null || input === void 0 ? void 0 : input.beforeTxSignature) {
                    params['before_tx_signature'] = input.beforeTxSignature;
                }
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'wallet/parsed_transaction_history',
                    params,
                });
                const trsnsactions = data.result;
                return trsnsactions;
            }
            catch (error) {
                throw error;
            }
        });
    }
}
exports.WalletClient = WalletClient;
//# sourceMappingURL=wallet-client.js.map