"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectionClient = void 0;
const lodash_1 = require("lodash");
const utils_1 = require("../utils");
const types_1 = require("../types");
class CollectionClient {
    constructor(config) {
        this.config = config;
    }
    getNfts(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    collection_address: input.collectionAddress,
                };
                if (params.network !== types_1.Network.Mainnet) {
                    throw new Error('This operation only available on mainnet-beta');
                }
                if ((0, lodash_1.isNumber)(input === null || input === void 0 ? void 0 : input.page)) {
                    if (input.page < 1) {
                        throw new Error('should not be less than 1: size');
                    }
                    params['page'] = input.page;
                }
                if ((0, lodash_1.isNumber)(input === null || input === void 0 ? void 0 : input.size)) {
                    if (input.size > 50 || input.size < 1) {
                        throw new Error('allowed between 1 to 50: size');
                    }
                    params['size'] = input.size;
                }
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'collections/get_nfts',
                    params,
                });
                const collectionNfts = data.result;
                return collectionNfts;
            }
            catch (error) {
                throw error;
            }
        });
    }
}
exports.CollectionClient = CollectionClient;
//# sourceMappingURL=collection-client.js.map