"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandyMachineClient = void 0;
const utils_1 = require("../utils");
const utils_2 = require("../utils");
class CandyMachineClient {
    constructor(config) {
        this.config = config;
        this.caseConverter = new utils_1.CaseConverter();
    }
    readMints(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    address: input.address,
                };
                if (input.version) {
                    params['version'] = input.version;
                }
                const data = yield (0, utils_2.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'candy_machine/nft_addresses',
                    params,
                });
                const mints = data.result;
                return mints;
            }
            catch (error) {
                throw error;
            }
        });
    }
    readNfts(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    address: input.address,
                };
                if (input.page) {
                    params['page'] = input.page;
                }
                if (input.size) {
                    params['size'] = input.size;
                }
                if (input.version) {
                    params['version'] = input.version;
                }
                const data = yield (0, utils_2.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'candy_machine/nft_addresses',
                    params,
                });
                const response = data.result;
                return response;
            }
            catch (error) {
                throw error;
            }
        });
    }
    create(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const reqBody = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    wallet: input.wallet,
                    symbol: input.symbol,
                    items_available: input.itemsAvailable,
                    collection: input.collection,
                };
                if (input === null || input === void 0 ? void 0 : input.feePayer) {
                    reqBody['fee_payer'] = input.feePayer;
                }
                if (input === null || input === void 0 ? void 0 : input.maxSupply) {
                    reqBody['max_supply'] = input.maxSupply;
                }
                if (input === null || input === void 0 ? void 0 : input.royalty) {
                    reqBody['royalty'] = input.royalty;
                }
                if (input === null || input === void 0 ? void 0 : input.amount) {
                    reqBody['amount'] = input.amount;
                }
                if (input === null || input === void 0 ? void 0 : input.bulkItemSettings) {
                    reqBody['bulk_item_settings'] = input.bulkItemSettings;
                }
                if (input === null || input === void 0 ? void 0 : input.itemSettings) {
                    reqBody['item_settings'] = this.caseConverter.convertToSnakeCaseObject(input.itemSettings);
                }
                if (input === null || input === void 0 ? void 0 : input.creators) {
                    reqBody['creators'] = input.creators;
                }
                if (input === null || input === void 0 ? void 0 : input.creators) {
                    reqBody['creators'] = input.creators;
                }
                if (input === null || input === void 0 ? void 0 : input.guards) {
                    reqBody['guards'] = input.guards;
                }
                if (input === null || input === void 0 ? void 0 : input.groups) {
                    reqBody['groups'] = input.groups;
                }
                const response = yield (0, utils_2.restApiCall)(this.config.apiKey, {
                    method: 'post',
                    url: 'candy_machine/create',
                    data: reqBody,
                });
                const candyMachineAndTx = response.result;
                return candyMachineAndTx;
            }
            catch (error) {
                throw error;
            }
        });
    }
    insert(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const reqBody = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    wallet: input.wallet,
                    candy_machine: input.candyMachine,
                    items: input.items,
                };
                if (input === null || input === void 0 ? void 0 : input.index) {
                    reqBody['index'] = input.index;
                }
                if (input.items.length === 0) {
                    throw new Error('Atleast insert one item!');
                }
                const response = yield (0, utils_2.restApiCall)(this.config.apiKey, {
                    method: 'post',
                    url: 'candy_machine/insert',
                    data: reqBody,
                });
                const candyMachineAndTx = response.result;
                return candyMachineAndTx;
            }
            catch (error) {
                throw error;
            }
        });
    }
    mint(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const reqBody = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    wallet: input.wallet,
                    candy_machine: input.candyMachine,
                    authority: input.authority,
                };
                if (input === null || input === void 0 ? void 0 : input.mintGroup) {
                    reqBody['mint_group'] = input.mintGroup;
                }
                if (input === null || input === void 0 ? void 0 : input.feePayer) {
                    reqBody['fee_payer'] = input.feePayer;
                }
                if (input === null || input === void 0 ? void 0 : input.guardSettings) {
                    reqBody['guard_settings'] = input.guardSettings;
                }
                const response = yield (0, utils_2.restApiCall)(this.config.apiKey, {
                    method: 'post',
                    url: 'candy_machine/mint',
                    data: reqBody,
                });
                const mintAndTx = response.result;
                return mintAndTx;
            }
            catch (error) {
                throw error;
            }
        });
    }
    monitor(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const reqBody = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    address: input.candyMachine,
                };
                const response = yield (0, utils_2.restApiCall)(this.config.apiKey, {
                    method: 'post',
                    url: 'candy_machine/monitor',
                    data: reqBody,
                });
                const isMonitored = response.success;
                return isMonitored;
            }
            catch (error) {
                throw error;
            }
        });
    }
    unmonitor(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const reqBody = {
                    network: (_a = input === null || input === void 0 ? void 0 : input.network) !== null && _a !== void 0 ? _a : this.config.network,
                    address: input.candyMachine,
                };
                const response = yield (0, utils_2.restApiCall)(this.config.apiKey, {
                    method: 'delete',
                    url: 'candy_machine/unmonitor',
                    data: reqBody,
                });
                const isUnmonitored = response.success;
                return isUnmonitored;
            }
            catch (error) {
                throw error;
            }
        });
    }
}
exports.CandyMachineClient = CandyMachineClient;
//# sourceMappingURL=candy-machine-client.js.map