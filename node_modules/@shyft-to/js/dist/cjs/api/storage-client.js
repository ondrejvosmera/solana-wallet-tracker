"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageClient = void 0;
const form_data_1 = __importDefault(require("form-data"));
const utils_1 = require("../utils");
class StorageClient {
    constructor(config) {
        this.config = config;
    }
    uploadAsset(input) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let data = new form_data_1.default();
                data.append('file', input.file);
                const response = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'post',
                    url: 'storage/upload',
                    maxBodyLength: Infinity,
                    data,
                });
                const uploadedAsset = response.result;
                return uploadedAsset;
            }
            catch (error) {
                throw error;
            }
        });
    }
    createMetadata(input) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const reqBody = {
                    creator: input.creator,
                    image: input.image,
                    name: input.name,
                    symbol: input.symbol,
                    description: input.description,
                    attributes: input.attributes,
                    share: 100,
                };
                if (input === null || input === void 0 ? void 0 : input.external_url) {
                    reqBody['external_url'] = input.external_url;
                }
                if (input === null || input === void 0 ? void 0 : input.sellerFeeBasisPoints) {
                    reqBody['royalty'] = input.sellerFeeBasisPoints;
                }
                if (input === null || input === void 0 ? void 0 : input.files) {
                    reqBody['files'] = input.files;
                }
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'post',
                    url: 'metadata/create',
                    data: reqBody,
                });
                const uploadedMetadata = data.result;
                return uploadedMetadata;
            }
            catch (error) {
                throw error;
            }
        });
    }
}
exports.StorageClient = StorageClient;
//# sourceMappingURL=storage-client.js.map