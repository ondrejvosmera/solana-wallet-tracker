import { ParsedTransactionWithMeta } from '@solana/web3.js';
import { ShyftConfig } from '../utils';
import { Domain, GroupNftsInCollection, Portfolio, TokenBalance, ParsedTranaction, Network } from '../types';
export declare class WalletClient {
    private readonly config;
    constructor(config: ShyftConfig);
    getBalance(input: {
        network?: Network;
        wallet: string;
    }): Promise<number>;
    sendSol(input: {
        network?: Network;
        fromAddress: string;
        toAddress: string;
        amount: number;
    }): Promise<string>;
    getTokenBalance(input: {
        network?: Network;
        wallet: string;
        token: string;
    }): Promise<Omit<TokenBalance, 'associated_account'> & {
        isFrozen: boolean;
    }>;
    getAllTokenBalance(input: {
        network?: Network;
        wallet: string;
    }): Promise<TokenBalance[]>;
    getPortfolio(input: {
        network?: Network;
        wallet: string;
    }): Promise<Portfolio>;
    getDomains(input: {
        network?: Network;
        wallet: string;
    }): Promise<Domain[]>;
    resolveDomainByAddress(input: {
        network?: Network;
        address: string;
    }): Promise<string>;
    collections(input: {
        network?: Network;
        wallet: string;
    }): Promise<GroupNftsInCollection>;
    transactionHistory(input: {
        network?: Network;
        wallet: string;
        limit?: number;
        beforeTxSignature?: string;
    }): Promise<ParsedTransactionWithMeta[]>;
    transaction(input: {
        network?: Network;
        txnSignature: string;
    }): Promise<ParsedTransactionWithMeta>;
    parsedTransactionHistory(input: {
        network?: Network;
        wallet: string;
        limit?: number;
        beforeTxSignature?: string;
    }): Promise<ParsedTranaction[]>;
}
