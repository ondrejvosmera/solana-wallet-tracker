"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxnRelayerClient = void 0;
const utils_1 = require("../utils");
class TxnRelayerClient {
    constructor(config) {
        this.config = config;
    }
    getOrCreate() {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                method: 'post',
                url: 'txn_relayer/create',
            });
            const wallet = data.result.wallet;
            return wallet;
        });
    }
    sign(input) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const reqBody = {
                network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                encoded_transaction: input.encodedTransaction,
            };
            const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                method: 'post',
                url: 'txn_relayer/sign',
                data: reqBody,
            });
            const result = (_b = data.result) === null || _b === void 0 ? void 0 : _b.tx;
            return result;
        });
    }
    signMany(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (input.encodedTransactions.length > 50 ||
                input.encodedTransactions.length < 1) {
                throw new Error('allowed between 1 to 50: encodedTransactions');
            }
            const reqBody = {
                network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                encoded_transactions: input.encodedTransactions,
            };
            if (input === null || input === void 0 ? void 0 : input.commitment) {
                reqBody['commitment'] = input.commitment;
            }
            const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                method: 'post',
                url: 'txn_relayer/sign_many',
                data: reqBody,
            });
            const result = data.result;
            return result;
        });
    }
}
exports.TxnRelayerClient = TxnRelayerClient;
//# sourceMappingURL=txn-relayer-client.js.map