"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SemiCustodialWalletClient = void 0;
const utils_1 = require("../utils");
class SemiCustodialWalletClient {
    constructor(config) {
        this.config = config;
    }
    create(input) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const reqBody = {
                    password: input.password,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'post',
                    url: 'semi_wallet/create',
                    data: reqBody,
                });
                const walletAddress = data.result.wallet_address;
                return walletAddress;
            }
            catch (error) {
                throw error;
            }
        });
    }
    getKeypair(input) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const params = {
                    password: input.password,
                    wallet: input.walletAddress,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'get',
                    url: 'semi_wallet/get_keypair',
                    params,
                });
                const wallet = data.result;
                return wallet;
            }
            catch (error) {
                throw error;
            }
        });
    }
    changePassword(input) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const reqBody = {
                    current_password: input.currentPassword,
                    new_password: input.newPassword,
                    wallet: input.walletAddress,
                };
                const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                    method: 'post',
                    url: 'semi_wallet/change_password',
                    data: reqBody,
                });
                const isPasswordChanged = data.success;
                return isPasswordChanged;
            }
            catch (error) {
                throw error;
            }
        });
    }
}
exports.SemiCustodialWalletClient = SemiCustodialWalletClient;
//# sourceMappingURL=semi-custodial-wallet-client.js.map