"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionClient = void 0;
const utils_1 = require("../utils");
class TransactionClient {
    constructor(config) {
        this.config = config;
    }
    raw(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const params = {
                network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                txn_signature: input.txnSignature,
            };
            const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                method: 'get',
                url: 'transaction/raw',
                params,
            });
            const transaction = data.result;
            return transaction;
        });
    }
    parsed(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const params = {
                network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                txn_signature: input.txnSignature,
            };
            const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                method: 'get',
                url: 'transaction/parsed',
                params,
            });
            const transaction = data.result;
            return transaction;
        });
    }
    history(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const params = {
                network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                account: input.account,
            };
            if (input === null || input === void 0 ? void 0 : input.txNum) {
                if (input.txNum > 100 || input.txNum < 1)
                    throw new Error("'txNum' should not be greater than 100 or less than 1");
                params['tx_num'] = input.txNum;
            }
            if (input === null || input === void 0 ? void 0 : input.beforeTxSignature) {
                params['before_tx_signature'] = input.beforeTxSignature;
            }
            if (input === null || input === void 0 ? void 0 : input.enableRaw) {
                params['enable_raw'] = input.enableRaw;
            }
            if (input === null || input === void 0 ? void 0 : input.enableEvents) {
                params['enable_events'] = input.enableEvents;
            }
            const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                method: 'get',
                url: 'transaction/history',
                params,
            });
            const transactions = data.result;
            return transactions;
        });
    }
    parseSelected(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (input.transactionSignatues.length > 50 ||
                input.transactionSignatues.length < 1) {
                throw new Error('allowed between 1 to 50: transactionSignatues');
            }
            const reqBody = {
                network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                transaction_signatures: input.transactionSignatues,
            };
            if (input === null || input === void 0 ? void 0 : input.enableRaw) {
                reqBody['enable_raw'] = input.enableRaw;
            }
            if (input === null || input === void 0 ? void 0 : input.enableEvents) {
                reqBody['enable_events'] = input.enableEvents;
            }
            const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                method: 'post',
                url: 'transaction/parse_selected',
                data: reqBody,
            });
            const transactions = data.result;
            return transactions;
        });
    }
    send(input) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const reqBody = {
                network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                encoded_transaction: input.encodedTransaction,
            };
            const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                method: 'post',
                url: 'transaction/send_txn',
                data: reqBody,
            });
            const result = (_b = data.result) === null || _b === void 0 ? void 0 : _b.signature;
            return result;
        });
    }
    sendMany(input) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (input.encodedTransactions.length > 50 ||
                input.encodedTransactions.length < 1) {
                throw new Error('allowed between 1 to 50: encodedTransactions');
            }
            const reqBody = {
                network: (_a = input.network) !== null && _a !== void 0 ? _a : this.config.network,
                encoded_transactions: input.encodedTransactions,
            };
            if (input === null || input === void 0 ? void 0 : input.commitment) {
                reqBody['commitment'] = input.commitment;
            }
            const data = yield (0, utils_1.restApiCall)(this.config.apiKey, {
                method: 'post',
                url: 'transaction/send_many_txns',
                data: reqBody,
            });
            const result = data.result;
            return result;
        });
    }
}
exports.TransactionClient = TransactionClient;
//# sourceMappingURL=transaction-client.js.map