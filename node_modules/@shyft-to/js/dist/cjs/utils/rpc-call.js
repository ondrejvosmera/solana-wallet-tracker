"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rpcCall = void 0;
const axios_1 = __importStar(require("axios"));
function rpcCall(connection, config) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const rpcUrl = connection.rpcEndpoint;
            if (new URL(rpcUrl).hostname !== 'rpc.shyft.to') {
                throw new Error("Currently DAS API support available only for the 'mainnet-beta' cluster");
            }
            const headers = {
                'Content-Type': 'application/json',
            };
            const { data } = yield axios_1.default.request(Object.assign(Object.assign({}, config), { method: 'post', baseURL: rpcUrl, headers }));
            return data;
        }
        catch (error) {
            if (error instanceof axios_1.AxiosError) {
                const err = error;
                const apiError = (_a = err.response) === null || _a === void 0 ? void 0 : _a.data;
                if (typeof apiError.error === 'object') {
                    if ('message' in apiError.error) {
                        throw new Error(apiError.error['message']);
                    }
                    throw new Error(JSON.stringify(apiError.error));
                }
                if (typeof apiError.error === 'string') {
                    throw new Error(apiError.error);
                }
                if (typeof apiError['message'] === 'string') {
                    throw new Error(apiError['message']);
                }
                throw apiError.error;
            }
            else {
                throw error;
            }
        }
    });
}
exports.rpcCall = rpcCall;
//# sourceMappingURL=rpc-call.js.map