import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface RfqProdResponseByMaker {
    /**
     * The PublicKey of the Response account
     */
    response: string;
    /**
     * RFQ identifier.
     * `optional field`
     */
    rfq: string;
    data: {
        /**
     * Number of legs prepared by the taker.
     */
        takerPreparedLegs: number;
        /**
     * Collateral locked by the taker.
     */
        takerCollateralLocked: number;
        /**
     * RFQ identifier.
     */
        rfq: string;
        /**
     * Number of settled legs.
     */
        settledLegs: number;
        /**
     * Number of legs prepared by the maker.
     */
        makerPreparedLegs: number;
        confirmed: {
            /**
     * Side of the confirmed trade.
     */
            side: string;
        };
        /**
     * Collateral locked by the maker.
     */
        makerCollateralLocked: number;
        /**
     * State of the RFQ.
     */
        state: string;
        /**
     * Who initialized the leg preparations.
     */
        legPreparationsInitializedBy: string[];
        ask: {
            price_quote: {
                /**
     * Price quote amount in basis points.
     */
                amount_bps: number;
                /**
     * Enumeration value for the price quote.
     */
                enumValue: string;
            };
            /**
     * Enumerated value for the ask type.
     */
            enumValue: string;
        };
        /**
     * The timestamp when the RFQ was created.
     */
        creationTimestamp: number;
        /**
     * Identity of the maker.
     */
        maker: string;
        /**
     * Programmatic identifier for the instrument.
     */
        instrument_program: string;
    };
    /**
     * Identity of the maker.
     * `optional field`
     */
    maker: string;
    /**
     * The timestamp when the Response account was created.
     */
    creationTimestamp: number;
    instrumentProgram: string | string[];
}
export interface RfqProdResponseByMakerRequestArgs {
    /**
     * Identity of the maker.
     * `optional field`
     */
    maker?: string;
    /**
     * RFQ identifier.
     * `optional field`
     */
    rfq?: string;
    instrumentProgram?: string | string[];
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class RfqProdResponseByMakerRequest extends BaseRequest<RfqProdResponseByMakerRequestArgs, PaginatedResponse<RfqProdResponseByMaker>> {
    readonly body: RfqProdResponseByMakerRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/rfq-prod/response-by-maker";
    constructor(body?: RfqProdResponseByMakerRequestArgs);
}
