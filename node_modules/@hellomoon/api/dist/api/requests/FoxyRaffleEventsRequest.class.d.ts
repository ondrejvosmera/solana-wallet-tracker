import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface FoxyRaffleEvents {
    /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *         If you want to look at historical data, let's say 7 days in the past.
     *         1. _Change the **operator** to <_
     *         2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *         3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - (
     * 86400 * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     * `optional field`
     */
    blockTime: {
        value: number;
        operator: "=" | "!=" | "<" | "<=" | ">" | ">=";
    } | {
        greaterThan: number;
        lessThan: number;
        operator: "between";
    };
    /**
     * Numeric identifier of a block describing the slot that the block was produced in
     */
    blockId: number;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId: string;
    /**
     * The zero-indexed position of an instruction - subinstruction combination in the context of the transaction.
     * This is generated by flattening all instruction/subinstruction/sub-subinstruction/... and numbering them
     * from 0.
     */
    instructionOrdinal: number;
    /**
     * Zero-indexed position of the transaction within the block
     */
    transactionPosition: number;
    /**
     * The public key of the user who initiated the event / the first signer for the transaction
     * `optional field`
     */
    userAccount: string;
    /**
     * The type of event that:
     *         - BUY_TICKETS: A user buys tickets for a raffle
     *         - CREATE_RAFFLE: A user creates a raffle
     *         - ADD_PRIZE: A user adds a prize to a raffle
     *         - COLLECT_PROCEEDS: A user collects the proceeds from a raffle
     *         - CLAIM_PRIZE: A user claims the prize from a raffle
     *         - CANCEL_RAFFLE: A user cancels a raffle
     */
    event: "ADD_PRIZE" | "BUY_TICKETS" | "CREATE_RAFFLE" | "CANCEL_RAFFLE" | "COLLECT_PROCEEDS" | "CLAIM_PRIZE";
    /**
     * The public key of the raffle account, can be used as a unique identifier for the raffle
     * `optional field`
     */
    raffleAccount: string;
    /**
     * The public key of the raffle owner
     */
    raffleOwner: string;
    /**
     * The amount of the rafflePaymentMint paid to the raffle account
     */
    rafflePaymentAmount: number;
    /**
     * The mint of the payment for the raffle tickets
     */
    rafflePaymentMint: string;
    /**
     * The number of tickets purchased in the raffle
     */
    numberoftickets: number;
    /**
     * The amount of the rafflePaymentMint earned by the raffle owner
     */
    raffleEarningsAmount: number;
    /**
     * The amount of the rafflePaymentMint paid as fees to foxy
     */
    raffleFeesAmount: number;
    /**
     * The mint of the nft prize for the raffle
     * `optional field`
     */
    prizeMint: string;
    /**
     * The total number of tickets that can be bought in the raffle
     */
    totalTickets: number;
    /**
     * The price of each ticket in the raffle
     */
    pricePerTicket: number;
    raffleEndTime: {
        value: number;
        operator: "=" | "!=" | "<" | "<=" | ">" | ">=";
    } | {
        greaterThan: number;
        lessThan: number;
        operator: "between";
    };
    /**
     * The public key of the winner of the raffle
     */
    winnerAccount: string;
}
export interface FoxyRaffleEventsRequestArgs {
    /**
     * The public key of the user who initiated the event / the first signer for the transaction
     * `optional field`
     */
    userAccount?: string;
    /**
     * The public key of the raffle account, can be used as a unique identifier for the raffle
     * `optional field`
     */
    raffleAccount?: string;
    /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *         If you want to look at historical data, let's say 7 days in the past.
     *         1. _Change the **operator** to <_
     *         2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *         3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - (
     * 86400 * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     * `optional field`
     */
    blockTime?: {
        value: number;
        operator: "=" | "!=" | "<" | "<=" | ">" | ">=";
    } | {
        greaterThan: number;
        lessThan: number;
        operator: "between";
    };
    /**
     * The mint of the nft prize for the raffle
     * `optional field`
     */
    prizeMint?: string;
    raffleEndTime?: {
        value: number;
        operator: "=" | "!=" | "<" | "<=" | ">" | ">=";
    } | {
        greaterThan: number;
        lessThan: number;
        operator: "between";
    };
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class FoxyRaffleEventsRequest extends BaseRequest<FoxyRaffleEventsRequestArgs, PaginatedResponse<FoxyRaffleEvents>> {
    readonly body: FoxyRaffleEventsRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/foxy/raffle-events";
    constructor(body?: FoxyRaffleEventsRequestArgs);
}
