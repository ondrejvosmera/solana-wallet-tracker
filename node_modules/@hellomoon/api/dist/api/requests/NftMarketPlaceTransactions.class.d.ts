import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface NftMarketplaceTransactions {
    transactiontype: Array<"ASK" | "UPDATE_ASK" | "CANCEL_ASK" | "BID" | "UPDATE_BID" | "CANCEL_BID" | "SALE"> | "ASK" | "UPDATE_ASK" | "CANCEL_ASK" | "BID" | "UPDATE_BID" | "CANCEL_BID" | "SALE";
    market: Array<"Tensor" | "ME_V2" | "Goatswap" | "Exchange Art" | "YAWWW" | "SolSea" | "Metaplex Auction House" | "OpenSea" | "Solsea" | "Solanart" | "Hadeswap" | "Coral Cube AMM" | "cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ" | "BAmKB58MgkeYF2VueVBfASL5q8Qf6VKp4nA4cRuVUVft"> | "Tensor" | "ME_V2" | "Goatswap" | "Exchange Art" | "YAWWW" | "SolSea" | "Metaplex Auction House" | "OpenSea" | "Solsea" | "Solanart" | "Hadeswap" | "Coral Cube AMM" | "cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ" | "BAmKB58MgkeYF2VueVBfASL5q8Qf6VKp4nA4cRuVUVft";
    /**
     * Mint address per the SPL token program.
     *       > You can also visit https://www.hellomoon.io/id?search=token to search for mints using a user
     * interface.
     */
    mint: string;
    /**
     * Amount of a token unconverted for decimals, e.g. 1 SOL is 1,000,000,000 since SOL has 9 decimals.
     */
    price: number;
    /**
     * The publickey of the wallet listing an NFT for sale or canceling their listing
     */
    seller: string;
    /**
     * PublicKey of the buyer of the NFT
     * `optional field`
     */
    buyer: string;
    /**
     * The program id references the lending program that the user account is removing or adding tokens from
     * `optional field`
     */
    programId: string;
    /**
     * Zero-indexed position of the transaction within the block
     */
    transactionPosition: number;
    /**
     * The zero-indexed position of an instruction - subinstruction combination in the context of the transaction.
     * This is generated by flattening all instruction/subinstruction/sub-subinstruction/... and numbering them
     * from 0.
     */
    instructionOrdinal: number;
    /**
     * Numeric identifier of a block describing the slot that the block was produced in
     */
    blockId: number;
    blocktime?: {
        value: number;
        operator: "=" | "!=" | "<" | "<=" | ">" | ">=";
    } | {
        greaterThan: number;
        lessThan: number;
        operator: "between";
    };
    transactionId: string;
}
export interface NftMarketplaceTransactionsRequestArgs {
    transactiontype: Array<"ASK" | "UPDATE_ASK" | "CANCEL_ASK" | "BID" | "UPDATE_BID" | "CANCEL_BID" | "SALE"> | "ASK" | "UPDATE_ASK" | "CANCEL_ASK" | "BID" | "UPDATE_BID" | "CANCEL_BID" | "SALE";
    market: Array<"Tensor" | "ME_V2" | "Goatswap" | "Exchange Art" | "YAWWW" | "SolSea" | "Metaplex Auction House" | "OpenSea" | "Solsea" | "Solanart" | "Hadeswap" | "Coral Cube AMM" | "cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ" | "BAmKB58MgkeYF2VueVBfASL5q8Qf6VKp4nA4cRuVUVft"> | "Tensor" | "ME_V2" | "Goatswap" | "Exchange Art" | "YAWWW" | "SolSea" | "Metaplex Auction House" | "OpenSea" | "Solsea" | "Solanart" | "Hadeswap" | "Coral Cube AMM" | "cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ" | "BAmKB58MgkeYF2VueVBfASL5q8Qf6VKp4nA4cRuVUVft";
    /**
     * Mint address per the SPL token program.
     *       > You can also visit https://www.hellomoon.io/id?search=token to search for mints using a user
     * interface.
     */
    mint: string;
    /**
     * Amount of a token unconverted for decimals, e.g. 1 SOL is 1,000,000,000 since SOL has 9 decimals.
     */
    price: number;
    /**
     * The publickey of the wallet listing an NFT for sale or canceling their listing
     */
    seller: string;
    /**
     * PublicKey of the buyer of the NFT
     * `optional field`
     */
    buyer: string;
    /**
     * The program id references the lending program that the user account is removing or adding tokens from
     * `optional field`
     */
    programId: string;
    blocktime?: {
        value: number;
        operator: "=" | "!=" | "<" | "<=" | ">" | ">=";
    } | {
        greaterThan: number;
        lessThan: number;
        operator: "between";
    };
    transactionId: string;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class NftMarketPlaceTransactions extends BaseRequest<NftMarketplaceTransactionsRequestArgs, PaginatedResponse<NftMarketplaceTransactions>> {
    readonly body: NftMarketplaceTransactionsRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/nft/marketplace/transactions";
    constructor(body: NftMarketplaceTransactionsRequestArgs);
}
