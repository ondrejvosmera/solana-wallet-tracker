import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface NftMintInformation {
    nftMint: string | string[];
    /**
     * Public key of address holding NFT metadata
     */
    nftMetadataAdress: string;
    /**
     * The NFT on chain metadata
     */
    nftMetadataJson: {
        /**
     * The on-chain name of the token, limited to 32 bytes
     */
        name: string;
        /**
     * The on-chain symbol of the token, limited to 10 bytes
     */
        symbol: string;
        /**
     * The URI of the token, limited to 200 bytes. This URI points to an off-chain JSON file that contains additional
     * data following a certain standard.
     */
        uri: string;
        /**
     * The royalties shared by the creators in basis points â€” i.e. 550 means 5.5%. Whilst this field is used
     * by virtually all NFT marketplaces, it is not enforced by the Token Metadata program itself.
     */
        sellerFeeBasisPoints: number;
        /**
     * An array of creators and their share of the royalties. This array is limited to 5 creators.
     */
        creators: object[];
        /**
     * This field optionally links to the Mint address of another NFT that acts as a Collection NFT.
     */
        collection: {
            /**
     * A boolean indicating if the owner of the Collection NFT signed this NFT. It is important to check this
     * field to ensure the authenticity of the collection.
     */
            verified: boolean;
            /**
     * The public key of the Collection NFT's Mint Account
     */
            key: string;
        };
    };
    /**
     * The public key of the Collection NFT's Mint Account
     */
    nftCollectionMint: string;
    /**
     * Array of verified creators
     */
    nftVerifiedCreatorsArray: string[];
    /**
     * The public key of the address that has signed the nft metadata as a creator
     * `optional field`
     */
    verifiedCreator: string;
    /**
     * Numeric identifier of a block describing the slot that the block was produced in
     */
    blockId: number;
    /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
    blockTime: number;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId: string;
    /**
     * Zero-indexed position of the transaction within the block
     */
    transactionPosition: number;
    /**
     * The zero-indexed position of an instruction - subinstruction combination in the context of the transaction.
     * This is generated by flattening all instruction/subinstruction/sub-subinstruction/... and numbering them
     * from 0.
     */
    instructionOrdinal: number;
    /**
     * The name of the instruction
     */
    instructionName: string;
    /**
     * Metaplex Ruleset for the NFT
     */
    ruleset: string;
    /**
     * The token standard for the NFT
     */
    tokenstandard: string;
}
export interface NftMintInformationRequestArgs {
    nftMint?: string | string[];
    /**
     * The public key of the Collection NFT's Mint Account
     */
    nftCollectionMint?: string;
    /**
     * The public key of the address that has signed the nft metadata as a creator
     * `optional field`
     */
    verifiedCreator?: string;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class NftMintInformationRequest extends BaseRequest<NftMintInformationRequestArgs, PaginatedResponse<NftMintInformation>> {
    readonly body: NftMintInformationRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/nft/mint_information";
    constructor(body?: NftMintInformationRequestArgs);
}
