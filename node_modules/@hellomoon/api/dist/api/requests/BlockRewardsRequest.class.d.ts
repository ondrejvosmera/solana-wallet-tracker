import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface BlockRewards {
    /**
     * Numeric identifier of a block describing the slot that the block was produced in
     */
    blockId: number;
    /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
    blockTime: number;
    /**
     * commission earned by the validator by providing rewards. Ranges 0-100 so 10 is 10%
     */
    commission: number;
    /**
     * lamports given to the publickey
     */
    amount: number;
    /**
     * balance of the public key of the account after the reward
     */
    postBalance: number;
    /**
     * public key of the account that received the reward (i.e, staking account)
     * `optional field`
     */
    pubkey: string;
    rewardType: Array<"Fee" | "Staking" | "Voting"> | "Fee" | "Staking" | "Voting";
}
export interface BlockRewardsRequestArgs {
    blockTime?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
        value: number;
    } | number;
    commission?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * commission earned by the validator by providing rewards. Ranges 0-100 so 10 is 10%
     */
        value: number;
    } | number;
    amount?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * lamports given to the publickey
     */
        value: number;
    } | number;
    /**
     * public key of the account that received the reward (i.e, staking account)
     * `optional field`
     */
    pubkey?: string;
    rewardType?: Array<"Fee" | "Staking" | "Voting"> | "Fee" | "Staking" | "Voting";
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class BlockRewardsRequest extends BaseRequest<BlockRewardsRequestArgs, PaginatedResponse<BlockRewards>> {
    readonly body: BlockRewardsRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/staking/rewards";
    constructor(body?: BlockRewardsRequestArgs);
}
