import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface NftRoyalty {
    mint: string | string[];
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId: string;
    /**
     * The address of the creator of the NFT. This is the address that will receive the royalty
     * `optional field`
     */
    creatorAddress: string;
    /**
     * The percentage of the royalty that the creator will receive. This is a number between 0 and 100
     */
    creatorShare: number;
    /**
     * source owner is the per owner of the source (token account), each token account will refer to a distinct
     * token mint
     * `optional field`
     */
    sourceOwner: string;
    /**
     * destination owner is the per owner of the destination (token account), each token account will refer
     * to a distinct token mint
     * `optional field`
     */
    destinationOwner: string;
    /**
     * The amount of the royalty paid in lamports
     */
    royaltyAmountPaid: number;
    market: Array<"Solanart" | "Elixir" | "OpenSea" | "ME_V1" | "SolSea" | "Tensor" | "Coral Cube" | "SMB" | "Exchange.Art" | "Hadeswap" | "YAWWW" | "Coral Cube AMM" | "ME_V2" | "CoralCube"> | "Solanart" | "Elixir" | "OpenSea" | "ME_V1" | "SolSea" | "Tensor" | "Coral Cube" | "SMB" | "Exchange.Art" | "Hadeswap" | "YAWWW" | "Coral Cube AMM" | "ME_V2" | "CoralCube" | string;
    /**
     * The new balance of the destination address after the royalty was paid in lamports
     */
    newDestinationBalance: number;
    /**
     * The new balance of the source address after the royalty was paid in lamports
     */
    newSourceBalance: number;
    /**
     * The old balance of the destination address after the royalty was paid in lamports
     */
    oldDestinationBalance: number;
    /**
     * The old balance of the destination address after the royalty was paid in lamports
     */
    oldSourceBalance: number;
    /**
     *
     *     The creator sellerFeeBasisPoints for a Solana NFT refers to the percentage of the sale proceeds that
     * will be taken by the NFT creator as a fee when the NFT is sold by the current owner.
     *
     * >In Solana, the sellerFeeBasisPoints parameter is expressed as a number between 0 and 10,000, where 100
     * basis points equals >1%. So, for example, if the creator sets the sellerFeeBasisPoints to 500, then they
     * will receive 5% of the sale proceeds >as a fee when the NFT is sold by the current owner.
     *
     * `optional field`
     */
    sellerFeeBasisPoints: string;
    /**
     * Numeric identifier of a block describing the slot that the block was produced in
     */
    blockId: number;
    blockTime: {
        value: number;
        operator: "=" | "!=" | "<" | "<=" | ">" | ">=";
    } | {
        greaterThan: number;
        lessThan: number;
        operator: "between";
    };
    /**
     * Zero-indexed position of the transaction within the block
     */
    transactionPosition: number;
    /**
     * The zero-indexed position of an instruction - subinstruction combination in the context of the transaction.
     * This is generated by flattening all instruction/subinstruction/sub-subinstruction/... and numbering them
     * from 0.
     */
    instructionOrdinal: number;
    /**
     * Zero-indexed position of the instruction within the context of a transaction
     */
    instructionposition: number;
    /**
     * Zero-indexed position of sub-instruction within the context of a main instruction
     */
    subinstructionposition: number;
}
export interface NftRoyaltyRequestArgs {
    mint?: string | string[];
    /**
     * The address of the creator of the NFT. This is the address that will receive the royalty
     * `optional field`
     */
    creatorAddress?: string;
    creatorShare?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * The percentage of the royalty that the creator will receive. This is a number between 0 and 100
     */
        value: number;
    } | number;
    blockTime?: {
        value: number;
        operator: "=" | "!=" | "<" | "<=" | ">" | ">=";
    } | {
        greaterThan: number;
        lessThan: number;
        operator: "between";
    };
    market?: Array<"Solanart" | "Elixir" | "OpenSea" | "ME_V1" | "SolSea" | "Tensor" | "Coral Cube" | "SMB" | "Exchange.Art" | "Hadeswap" | "YAWWW" | "Coral Cube AMM" | "ME_V2" | "CoralCube"> | "Solanart" | "Elixir" | "OpenSea" | "ME_V1" | "SolSea" | "Tensor" | "Coral Cube" | "SMB" | "Exchange.Art" | "Hadeswap" | "YAWWW" | "Coral Cube AMM" | "ME_V2" | "CoralCube" | string;
    royaltyAmountPaid?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * The amount of the royalty paid in lamports
     */
        value: number;
    } | number;
    /**
     *
     *     The creator sellerFeeBasisPoints for a Solana NFT refers to the percentage of the sale proceeds that
     * will be taken by the NFT creator as a fee when the NFT is sold by the current owner.
     *
     * >In Solana, the sellerFeeBasisPoints parameter is expressed as a number between 0 and 10,000, where 100
     * basis points equals >1%. So, for example, if the creator sets the sellerFeeBasisPoints to 500, then they
     * will receive 5% of the sale proceeds >as a fee when the NFT is sold by the current owner.
     *
     * `optional field`
     */
    sellerFeeBasisPoints?: string;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId?: string;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class NftRoyaltyRequest extends BaseRequest<NftRoyaltyRequestArgs, PaginatedResponse<NftRoyalty>> {
    readonly body: NftRoyaltyRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/nft/royalty";
    constructor(body?: NftRoyaltyRequestArgs);
}
