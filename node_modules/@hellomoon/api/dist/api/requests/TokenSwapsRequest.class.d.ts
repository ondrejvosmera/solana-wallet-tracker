import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface TokenSwaps {
    /**
     * The user account or public key references a digital wallet that can be used to sign transactions, transfers
     * and
     *         hold digital assets such as tokens and NFTs.
     * `optional field`
     */
    userAccount: string;
    /**
     * The source mint references the token that is sent for the swap.
     *         For example, The user account swaps the source mint for the destination mint.
     * `optional field`
     */
    sourceMint: string;
    /**
     * The destination mint references the token that is received from the swap.
     *           For example, The user account swaps the source mint for the destination mint.
     * `optional field`
     */
    destinationMint: string;
    /**
     * The program id references the DEX (decentralized exchange) address that is used to execute the swap with
     * their provided liquidity.
     *       > You can also visit https://www.hellomoon.io/id?search=dex to search for a DEX program using a
     * user interface.
     * `optional field`
     */
    programId: string;
    /**
     * The aggregator name references a program that allows the user account to access liquidity from multiple
     * DEXs. The name is used to identify the liquidity provider used to execute the swap.
     * `optional field`
     */
    aggregatorName: "Jupiter v2" | "Jupiter v3" | "Jupiter v4";
    /**
     * The amount of the source mint sent for the swap.
     *         The amount is in the source mint's native unit, which is differentiated by it's decimal value.
     *         For example, the amount of 1,000,000 for the source mint of USDC would be 1 USDC since its decimal
     * value is 6.
     */
    sourceAmount: number;
    /**
     * The amount of destination mints received from the swap.
     *           The amount is in the source mint's native unit, which is differentiated by it's decimal value.
     *           For example, the amount of 1,000,000 for the source mint of USDC would be 1 USDC since its
     * decimal value is 6.
     */
    destinationAmount: number;
    /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *         If you want to look at historical data, let's say 7 days in the past.
     *         1. _Change the **operator** to <_
     *         2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *         3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - (
     * 86400 * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     * `optional field`
     */
    blockTime: {
        value: number;
        operator: "=" | "!=" | "<" | "<=" | ">" | ">=";
    } | {
        greaterThan: number;
        lessThan: number;
        operator: "between";
    };
    /**
     * Numeric identifier of a block describing the slot that the block was produced in
     */
    blockId: number;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId: string;
    /**
     * The zero-indexed position of an instruction - subinstruction combination in the context of the transaction.
     * This is generated by flattening all instruction/subinstruction/sub-subinstruction/... and numbering them
     * from 0.
     */
    instructionOrdinal: number;
    /**
     * The pool id references the pool that is used for the swap.
     *         For example, The user account swaps the source mint for the destination mint.
     * `optional field`
     */
    poolId: string;
}
export interface TokenSwapsRequestArgs {
    /**
     * The user account or public key references a digital wallet that can be used to sign transactions, transfers
     * and
     *         hold digital assets such as tokens and NFTs.
     * `optional field`
     */
    userAccount?: string;
    /**
     * The source mint references the token that is sent for the swap.
     *         For example, The user account swaps the source mint for the destination mint.
     * `optional field`
     */
    sourceMint?: string;
    /**
     * The destination mint references the token that is received from the swap.
     *           For example, The user account swaps the source mint for the destination mint.
     * `optional field`
     */
    destinationMint?: string;
    /**
     * The aggregator name references a program that allows the user account to access liquidity from multiple
     * DEXs. The name is used to identify the liquidity provider used to execute the swap.
     * `optional field`
     */
    aggregatorName?: "Jupiter v2" | "Jupiter v3" | "Jupiter v4";
    /**
     * The program id references the DEX (decentralized exchange) address that is used to execute the swap with
     * their provided liquidity.
     *       > You can also visit https://www.hellomoon.io/id?search=dex to search for a DEX program using a
     * user interface.
     * `optional field`
     */
    programId?: string;
    sourceAmount?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * The amount of the source mint sent for the swap.
     *         The amount is in the source mint's native unit, which is differentiated by it's decimal value.
     *         For example, the amount of 1,000,000 for the source mint of USDC would be 1 USDC since its decimal
     * value is 6.
     */
        value: number;
    } | number;
    destinationAmount?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * The amount of destination mints received from the swap.
     *           The amount is in the source mint's native unit, which is differentiated by it's decimal value.
     *           For example, the amount of 1,000,000 for the source mint of USDC would be 1 USDC since its
     * decimal value is 6.
     */
        value: number;
    } | number;
    blockId?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * Numeric identifier of a block describing the slot that the block was produced in
     */
        value: number;
    } | number;
    /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *         If you want to look at historical data, let's say 7 days in the past.
     *         1. _Change the **operator** to <_
     *         2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *         3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - (
     * 86400 * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     * `optional field`
     */
    blockTime?: {
        value: number;
        operator: "=" | "!=" | "<" | "<=" | ">" | ">=";
    } | {
        greaterThan: number;
        lessThan: number;
        operator: "between";
    };
    /**
     * The pool id references the pool that is used for the swap.
     *         For example, The user account swaps the source mint for the destination mint.
     * `optional field`
     */
    poolId?: string;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class TokenSwapsRequest extends BaseRequest<TokenSwapsRequestArgs, PaginatedResponse<TokenSwaps>> {
    readonly body: TokenSwapsRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/defi/swaps";
    constructor(body?: TokenSwapsRequestArgs);
}
