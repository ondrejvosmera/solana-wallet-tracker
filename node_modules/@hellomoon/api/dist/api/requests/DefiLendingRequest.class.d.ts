import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface DefiLending {
    /**
     * The programName references the lending protocol name
     *             that the user account is borrowing or repaying to.
     * `optional field`
     */
    programName: string;
    /**
     * The programId references the lending protocol
     *         that the user account is borrowing or repaying to.
     * `optional field`
     */
    programId: string;
    /**
     * Select the action types: **borrow** or **repay**.
     *     >If borrow, the endpoint returns the amount of tokens the user account borrowed from the program.
     *     >If repay, the endpoint returns the amount of tokens that are repaid to the user.
     */
    actionType: "borrow" | "repay";
    /**
     * The user account is the public key of the wallet that
     *         is borrowing or repaying from the program.
     * `optional field`
     */
    userAccount: string;
    /**
     * The mint references the token that the user account is repaid or borrowing from the program.
     * `optional field`
     */
    mint: string;
    /**
     * The amount of tokens that the user account is repaying or borrowing.
     *         The amount is in the source mint's native unit, which is differentiated by it's decimal value.
     *         For example, the amount of 1,000,000 for the source mint of USDC would be 1 USDC since its decimal
     * value is 6.
     */
    amount: number;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId: string;
    /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
    blockTime: number;
    /**
     * Name of this instruction
     * `optional field`
     */
    instructionName: string;
    /**
     * HelloMoon unique identifier for specific instruction within a transaction
     */
    instructionId: string;
    /**
     * Zero-indexed position of the instruction within the context of a transaction
     */
    instructionPosition: number;
    /**
     * Zero-indexed position of sub-instruction within the context of a main instruction
     */
    subInstructionPosition: number;
    /**
     * The zero-indexed position of an instruction - subinstruction combination in the context of the transaction.
     * This is generated by flattening all instruction/subinstruction/sub-subinstruction/... and numbering them
     * from 0.
     */
    instructionOrdinal: number;
}
export interface DefiLendingRequestArgs {
    /**
     * The programId references the lending protocol
     *         that the user account is borrowing or repaying to.
     * `optional field`
     */
    programId?: string;
    /**
     * The programName references the lending protocol name
     *             that the user account is borrowing or repaying to.
     * `optional field`
     */
    programName?: string;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId?: string;
    actionType?: "borrow" | "repay" | Array<"borrow" | "repay">;
    /**
     * The user account is the public key of the wallet that
     *         is borrowing or repaying from the program.
     * `optional field`
     */
    userAccount?: string;
    /**
     * The mint references the token that the user account is repaid or borrowing from the program.
     * `optional field`
     */
    mint?: string;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class DefiLendingRequest extends BaseRequest<DefiLendingRequestArgs, PaginatedResponse<DefiLending>> {
    readonly body: DefiLendingRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/defi/lending";
    constructor(body?: DefiLendingRequestArgs);
}
