import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface FraktLoanEvents {
    /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
    blockTime: number;
    /**
     * Numeric identifier of a block describing the slot that the block was produced in
     */
    blockId: number;
    /**
     * Zero-indexed position of the transaction within the block
     */
    transactionPosition: number;
    /**
     * The zero-indexed position of an instruction - subinstruction combination in the context of the transaction.
     * This is generated by flattening all instruction/subinstruction/sub-subinstruction/... and numbering them
     * from 0.
     */
    instructionOrdinal: number;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId: string;
    actionType: Array<"reject_loan" | "liquidate_loan" | "approve_loan" | "payback_loan" | "propose_loan"> | "reject_loan" | "liquidate_loan" | "approve_loan" | "payback_loan" | "propose_loan";
    /**
     * The loan references the account address of the loan that was borrowed by the user account.
     * `optional field`
     */
    loan: string;
    /**
     * The borrower references the account address of the user that borrowed the loan.
     */
    borrower: string;
    /**
     * Mint address of nft per the spl token program. Each NFT has a unique mint address within the collection.
     * `optional field`
     */
    nftMint: string;
    /**
     * The collectionInfo references the account address of the collection that the NFT belongs to.
     */
    collectionInfo: string;
    /**
     * The liquidityPool references the account address of the liquidity pool that the loan was borrowed from.
     */
    liquidityPool: string;
    /**
     * isPriceBased references whether the loan was borrowed based on a price or not.
     */
    isPriceBased: boolean;
    /**
     * The originalPriceFromBorrower references the original price that the borrower set when they borrowed
     * the loan.
     */
    originalPriceFromBorrower: number;
    /**
     * The priceApproved references the price that the lender approved when they approved the loan.
     */
    priceApproved: number;
    /**
     * The discount references the discount that the lender approved when they approved the loan.
     */
    discount: number;
    /**
     * The LTV references the LTV that the lender approved when they approved the loan.
     */
    LTV: number;
    /**
     * The adminPayment references the admin payment that the lender approved when they approved the loan.
     */
    adminPayment: number;
    /**
     * The transferToUser references the amount of tokens that were transferred to the user when the loan was
     * approved.
     */
    transferToUser: number;
    /**
     * The reimbursedToUser references the amount of tokens that were reimbursed to the user when the loan was
     * rejected.
     */
    reimbursedToUser: number;
    /**
     * The paybackToLiqOwner references the amount of tokens that were paid back to the liquidity pool owner
     * when the loan was paid back.
     */
    paybackToLiqOwner: number;
    /**
     * The paybackRoyalty references the amount of tokens that were paid back to the royalty owner when the
     * loan was paid back.
     */
    paybackRoyalty: number;
    /**
     * The paybackTotal references the total amount of tokens that were paid back to the liquidity pool owner
     * and royalty owner when the loan was paid back.
     */
    paybackTotal: number;
    /**
     * The gracePeriod references the grace period that the lender approved when they approved the loan.
     */
    gracePeriod: number;
}
export interface FraktLoanEventsRequestArgs {
    blockTime?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
        value: number;
    } | number;
    /**
     * Mint address of nft per the spl token program. Each NFT has a unique mint address within the collection.
     * `optional field`
     */
    nftMint?: string;
    actionType?: Array<"reject_loan" | "liquidate_loan" | "approve_loan" | "payback_loan" | "propose_loan"> | "reject_loan" | "liquidate_loan" | "approve_loan" | "payback_loan" | "propose_loan";
    /**
     * The loan references the account address of the loan that was borrowed by the user account.
     * `optional field`
     */
    loan?: string;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class FraktLoanEventsRequest extends BaseRequest<FraktLoanEventsRequestArgs, PaginatedResponse<FraktLoanEvents>> {
    readonly body: FraktLoanEventsRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/frakt/loan-events";
    constructor(body?: FraktLoanEventsRequestArgs);
}
