import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface TokenTransfersWithOwner {
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId: string;
    /**
     * Numeric identifier of a block describing the slot that the block was produced in
     */
    blockId: number;
    /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
    blockTime: number;
    /**
     * Zero-indexed position of the transaction within the block
     */
    transactionPosition: number;
    /**
     * The zero-indexed position of an instruction - subinstruction combination in the context of the transaction.
     * This is generated by flattening all instruction/subinstruction/sub-subinstruction/... and numbering them
     * from 0.
     */
    instructionOrdinal: number;
    /**
     * Zero-indexed position of the instruction within the context of a transaction
     */
    instructionposition: number;
    /**
     * Zero-indexed position of sub-instruction within the context of a main instruction
     */
    subinstructionposition: number;
    /**
     * source owner is the per owner of the source (token account), each token account will refer to a distinct
     * token mint
     * `optional field`
     */
    sourceOwner: string;
    /**
     * The source token account refers to the account from which tokens are being transferred, When tokens are
     * transferred from the source the account is debited.
     * `optional field`
     */
    sourceAccount: string;
    /**
     * destination owner is the per owner of the destination (token account), each token account will refer
     * to a distinct token mint
     * `optional field`
     */
    destinationOwner: string;
    /**
     * The destination token account refers to the account to which tokens are being transferred, When tokens
     * are transferred to the destination the account is credited.
     * `optional field`
     */
    destinationAccount: string;
    type: Array<"closeAccount" | "createAccount" | "createAccountWithSeed" | "transferChecked" | "transfer"> | "closeAccount" | "createAccount" | "createAccountWithSeed" | "transferChecked" | "transfer";
    amount: {
        value: number;
        operator: "=" | "!=" | "<" | "<=" | ">" | ">=";
    };
    /**
     * Mint address per the SPL token program.
     *       > You can also visit https://www.hellomoon.io/id?search=token to search for mints using a user
     * interface.
     */
    mint: string;
    /**
     * new balance (in lamports) of destination token account
     */
    newDestinationBalance: number;
    /**
     * new balance (in lamports) of source token account
     */
    newSourceBalance: number;
    /**
     * old balance (in lamports) of destination token account
     */
    oldDestinationBalance: number;
    /**
     * old balance (in lamports) of source token account
     */
    oldSourceBalance: number;
}
export interface TokenTransfersWithOwnerRequestArgs {
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId?: string;
    blockTime?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
        value: number;
    } | number;
    /**
     * source owner is the per owner of the source (token account), each token account will refer to a distinct
     * token mint
     * `optional field`
     */
    sourceOwner?: string;
    /**
     * Token account of a mint owned by the token program (Spl Token Program). It holds information about the
     * tokens owned by a public key
     * `optional field`
     */
    sourceAccount?: string;
    /**
     * destination owner is the per owner of the destination (token account), each token account will refer
     * to a distinct token mint
     * `optional field`
     */
    destinationOwner?: string;
    /**
     * Token account of a mint owned by the token program (Spl Token Program). It holds information about the
     * tokens owned by a public key
     * `optional field`
     */
    destinationAccount?: string;
    type?: Array<"closeAccount" | "createAccount" | "createAccountWithSeed" | "transferChecked" | "transfer"> | "closeAccount" | "createAccount" | "createAccountWithSeed" | "transferChecked" | "transfer";
    amount?: {
        value: number;
        operator: "=" | "!=" | "<" | "<=" | ">" | ">=";
    };
    /**
     * Mint address per the SPL token program.
     *       > You can also visit https://www.hellomoon.io/id?search=token to search for mints using a user
     * interface.
     */
    mint?: string;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class TokenTransfersWithOwnerRequest extends BaseRequest<TokenTransfersWithOwnerRequestArgs, PaginatedResponse<TokenTransfersWithOwner>> {
    readonly body: TokenTransfersWithOwnerRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/token/transfers";
    constructor(body?: TokenTransfersWithOwnerRequestArgs);
}
