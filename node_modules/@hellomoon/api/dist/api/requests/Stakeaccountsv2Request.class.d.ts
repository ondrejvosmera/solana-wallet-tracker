import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface Stakeaccountsv2 {
    /**
     * Numeric identifier of a block describing the slot that the block was produced in
     */
    blockId: number;
    /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
    blockTime: number;
    /**
     * The zero-indexed position of an instruction - subinstruction combination in the context of the transaction.
     * This is generated by flattening all instruction/subinstruction/sub-subinstruction/... and numbering them
     * from 0.
     */
    instructionId: number;
    /**
     * Public key of the stake account
     * `optional field`
     */
    stakeAccount: string;
    /**
     * Public key of a stake authority account
     * `optional field`
     */
    stakeAuthority: string;
    /**
     * Public key of a withdraw authority account
     * `optional field`
     */
    withdrawAuthority: string;
    /**
     * Balance of the stake account at time of creation
     */
    balance: number;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId: string;
}
export interface Stakeaccountsv2RequestArgs {
    blockTime?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
        value: number;
    } | number;
    /**
     * Public key of the stake account
     * `optional field`
     */
    stakeAccount?: string;
    /**
     * Public key of a stake authority account
     * `optional field`
     */
    stakeAuthority?: string;
    /**
     * Public key of a withdraw authority account
     * `optional field`
     */
    withdrawAuthority?: string;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId?: string;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class Stakeaccountsv2Request extends BaseRequest<Stakeaccountsv2RequestArgs, PaginatedResponse<Stakeaccountsv2>> {
    readonly body: Stakeaccountsv2RequestArgs;
    readonly method = "POST";
    readonly url = "/v0/defi/staking/accounts";
    constructor(body?: Stakeaccountsv2RequestArgs);
}
