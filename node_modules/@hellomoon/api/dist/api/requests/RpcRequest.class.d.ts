import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface Rpc {
    /**
     * The version of JSONRPC to use
     */
    jsonrpc: "2.0";
    /**
     * a unique client-generated identifier
     */
    id: number | string;
    result: {
        context: {
            apiVersion: string;
            slot: number;
        };
        value: any;
    };
}
export interface RpcRequestArgs {
    /**
     * The version of JSONRPC to use
     */
    jsonrpc?: "2.0";
    /**
     * a unique client-generated identifier
     */
    id?: number | string;
    /**
     * A supported method for the RPC call
     */
    method?: "getAccountInfo" | "getBalance" | "getBlockHeight" | "getBlock" | "getBlockProduction" | "getBlockCommitment" | "getBlocks" | "getBlocksWithLimit" | "getBlockTime" | "getCusterNodes" | "getEpochInfo" | "getEpochSchedule" | "getFeeForMessage" | "getFirstAvailableBlock" | "getGenesisHash" | "getHealth" | "getHighestSnapshotSlot" | "getIdentity" | "getInflationGovernor" | "getInflationRate" | "getInflationReward" | "getLargestAccounts" | "getLatestBlockhash" | "getLeaderSchedule" | "getMaxRetransmitSlot" | "getMaxShredInsertSlot" | "getMinimumBalanceForRentExemption" | "getMultipleAccounts" | "getProgramAccounts" | "getRecentPerformanceSamples" | "getRecentPrioritizationFees" | "getSignaturesForAddress" | "getSignatureStatuses" | "getSlot" | "getSlotLeader" | "getSlotLeaders" | "getStakeActivation" | "getStakeMinimumDelegation" | "getSupply" | "getTokenAccountBalance" | "getTokenAccountsByDelegate" | "getTokenAccountsByOwner" | "getTokenLargestAccounts" | "getTokenSupply" | "getTransaction" | "getTransactionCount" | "getVersion" | "getVoteAccounts" | "isBlockhashValid" | "minimumLedgerSlot" | "requestAirdrop" | "sendTransaction" | "simulateTransaction";
    /**
     * Params for the method that is provided
     */
    params?: any[];
}
export declare class RpcRequest extends BaseRequest<RpcRequestArgs, PaginatedResponse<Rpc>> {
    readonly body: RpcRequestArgs;
    private static readonly rpcUrl;
    readonly method = "POST";
    readonly url = "/v0/rpc";
    constructor(body?: RpcRequestArgs);
    get requestUrl(): string;
}
