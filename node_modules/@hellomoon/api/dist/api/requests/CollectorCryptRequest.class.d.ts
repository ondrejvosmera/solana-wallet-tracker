import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface CollectorCrypt {
    /**
     * undefined
     * `optional field`
     */
    mint: string;
    /**
     * undefined
     * `optional field`
     */
    newOwner: string;
    blockId: number;
}
export interface CollectorCryptRequestArgs {
    /**
     * undefined
     * `optional field`
     */
    mint?: string;
    /**
     * undefined
     * `optional field`
     */
    newOwner?: string;
    blockId?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        value: number;
    } | number;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class CollectorCryptRequest extends BaseRequest<CollectorCryptRequestArgs, PaginatedResponse<CollectorCrypt>> {
    readonly body: CollectorCryptRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/collector-crypt";
    constructor(body?: CollectorCryptRequestArgs);
}
