import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface DefiLiquidityPools {
    /**
     * The program id references the lending program that the user account is removing or adding tokens from
     * `optional field`
     */
    programId: string;
    actionType: Array<"removeLiquidity" | "addLiquidity"> | "removeLiquidity" | "addLiquidity";
    /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
    blockTime: number;
    /**
     * The user account is the account that is removing or adding tokens.
     * `optional field`
     */
    userAccount: string;
    /**
     * Token mint A is the token address of the first token provided to the liquidity pool.
     *         The USD value of the deposit always needs to be split between the two tokens to ensure equal
     * value on each side.
     * `optional field`
     */
    tokenMintA: string;
    /**
     * Token mint B is the token address of the second token provided to the liquidity pool.
     *           The USD value of the deposit always needs to be split between the two tokens to ensure equal
     * value on each side.
     * `optional field`
     */
    tokenMintB: string;
    /**
     * The amount of (mint A) tokens that the user account is adding or removing from the liquidity pool.
     *         For example, the amount of 1,000,000 for the mint of USDC would be 1 USDC since its decimal value
     * is 6.
     */
    amountTokenA: number;
    /**
     * The amount of (mint B) tokens that the user account is adding or removing from the liquidity pool.
     *         For example, the amount of 1,000,000 for the mint of USDC would be 1 USDC since its decimal value
     * is 6.
     */
    amountTokenB: number;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId: string;
    /**
     * HelloMoon unique identifier for specific instruction within a transaction
     */
    instructionId: string;
    /**
     * Zero-indexed position of the instruction within the context of a transaction
     */
    instructionposition: number;
    /**
     * Zero-indexed position of sub-instruction within the context of a main instruction
     */
    subinstructionposition: number;
    /**
     * The zero-indexed position of an instruction - subinstruction combination in the context of the transaction.
     * This is generated by flattening all instruction/subinstruction/sub-subinstruction/... and numbering them
     * from 0.
     */
    instructionOrdinal: number;
    /**
     * Name of this instruction
     * `optional field`
     */
    instructionName: string;
}
export interface DefiLiquidityPoolsRequestArgs {
    /**
     * The program id references the lending program that the user account is removing or adding tokens from
     * `optional field`
     */
    programId?: string;
    /**
     * The user account is the account that is removing or adding tokens.
     * `optional field`
     */
    userAccount?: string;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId?: string;
    /**
     * Name of this instruction
     * `optional field`
     */
    instructionName?: string;
    actionType?: Array<"removeLiquidity" | "addLiquidity"> | "removeLiquidity" | "addLiquidity";
    /**
     * Token mint A is the token address of the first token provided to the liquidity pool.
     *         The USD value of the deposit always needs to be split between the two tokens to ensure equal
     * value on each side.
     * `optional field`
     */
    tokenMintA?: string;
    /**
     * Token mint B is the token address of the second token provided to the liquidity pool.
     *           The USD value of the deposit always needs to be split between the two tokens to ensure equal
     * value on each side.
     * `optional field`
     */
    tokenMintB?: string;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class DefiLiquidityPoolsRequest extends BaseRequest<DefiLiquidityPoolsRequestArgs, PaginatedResponse<DefiLiquidityPools>> {
    readonly body: DefiLiquidityPoolsRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/defi/liquidity-pools/withdrawals-deposits";
    constructor(body?: DefiLiquidityPoolsRequestArgs);
}
