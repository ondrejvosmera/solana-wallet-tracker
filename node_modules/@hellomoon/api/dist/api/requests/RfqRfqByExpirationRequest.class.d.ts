import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface RfqRfqByExpiration {
    /**
     * The PublicKey of the RFQ account
     * `optional field`
     */
    rfq: string;
    /**
     * The creation timestamp of the RFQ account
     */
    creationTimestamp: number;
    /**
     * The active window of the RFQ account
     */
    activeWindow: number;
    /**
     * The expiration date of the RFQ account
     */
    expirationTime: number;
    /**
     * The taker of the RFQ account
     * `optional field`
     */
    taker: string;
    /**
     * The instrument program of the RFQ account
     * `optional field`
     */
    instrumentProgram: string[];
    /**
     * The data associated with the RFQ account.
     */
    accountData: {
        /**
     * The non-response taker collateral locked of the RFQ account.
     */
        nonResponseTakerCollateralLocked: number;
        /**
     * The total responses of the RFQ account.
     */
        totalResponses: number;
        /**
     * The settling window time duration.
     */
        settlingWindow: number;
        /**
     * The identity of the taker.
     */
        taker: string;
        /**
     * The timestamp when the order was created.
     */
        creationTimestamp: number;
        fixedSize: {
            /**
     * Multiplier basis points for the legs.
     */
            legs_multiplier_bps: number;
            /**
     * Enumerated value type for the base asset.
     */
            enumValue: string;
        };
        /**
     * Type of the order, either Buy or Sell.
     */
        orderType: string;
        /**
     * The number of confirmed responses.
     */
        confirmedResponses: number;
        quoteAsset: {
            /**
     * Decimal precision of the instrument.
     */
            instrumentDecimals: number;
            /**
     * Programmatic identifier for the instrument.
     */
            instrumentProgram: string;
            /**
     * Array of numerical data associated with the instrument.
     */
            instrumentData: number[];
        };
        /**
     * The number of cleared responses.
     */
        clearedResponses: number;
        /**
     * The current state of the order.
     */
        state: string;
        /**
     * Hashed values expected for the legs.
     */
        expectedLegsHash: number[];
        /**
     * Total amount of collateral locked by the taker.
     */
        totalTakerCollateralLocked: number;
        legs: object[];
        /**
     * Expected size for the legs.
     */
        expectedLegsSize: number;
        /**
     * Duration of the order's active window.
     */
        activeWindow: number;
    };
    /**
     * The data associated with the option.
     */
    optionsAccountData: {
        /**
     * The amount of the quote per contract.
     */
        quoteAmountPerContract: number;
        /**
     * The mint of the underlying asset.
     */
        underlyingAssetMint: string;
        /**
     * The mint of the quote asset.
     */
        quoteAssetMint: string;
        /**
     * The amount of the underlying asset per contract.
     */
        underlyingAmountPerContract: number;
        /**
     * The fee account for the mint.
     */
        mintFeeAccount: string;
        /**
     * The expiration timestamp in UNIX format.
     */
        expirationUnixTimestamp: number;
        /**
     * The pool for the quote asset.
     */
        quoteAssetPool: string;
        /**
     * The pool for the underlying asset.
     */
        underlyingAssetPool: string;
        /**
     * The mint for the writer token.
     */
        writerTokenMint: string;
        /**
     * Indicates whether the option has expired or not.
     */
        expired: boolean;
        /**
     * The mint for the option.
     */
        optionMint: string;
        /**
     * The fee account for the exercise.
     */
        exerciseFeeAccount: string;
    };
}
export interface RfqRfqByExpirationRequestArgs {
    expirationTime?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * The expiration date of the RFQ account
     */
        value: number;
    } | number;
    /**
     * The PublicKey of the RFQ account
     * `optional field`
     */
    rfq?: string;
    /**
     * The taker of the RFQ account
     * `optional field`
     */
    taker?: string;
    /**
     * The instrument program of the RFQ account
     * `optional field`
     */
    instrumentProgram?: string[];
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class RfqRfqByExpirationRequest extends BaseRequest<RfqRfqByExpirationRequestArgs, PaginatedResponse<RfqRfqByExpiration>> {
    readonly body: RfqRfqByExpirationRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/rfq/rfq-by-expiration";
    constructor(body?: RfqRfqByExpirationRequestArgs);
}
