import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface Staketransfersv2 {
    /**
     * Numeric identifier of a block describing the slot that the block was produced in
     */
    blockId: number;
    /**
     * HelloMoon unique identifier for specific instruction within a transaction
     */
    instructionId: string;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId: string;
    /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
    blockTime: number;
    /**
     * stake account that is transferring lamports to the destination stake account
     * `optional field`
     */
    sourceStakeAccount: string;
    /**
     * stake account that is receiving lamports from the source stake account
     * `optional field`
     */
    destinationAccount: string;
    /**
     * account owner (public key), given authority to stake tokens
     * `optional field`
     */
    authority: string;
    /**
     * amount of lamports transferred
     * `optional field`
     */
    amount: number;
    /**
     * old balance (in lamports) of the source stake account
     */
    sourceOldBalance: number;
    /**
     * new balance (in lamports) of the source stake account
     */
    sourceNewBalance: number;
    /**
     * old balance (in lamports) of the destination stake account
     */
    destinationOldBalance: number;
    /**
     * new balance (in lamports) of the destination stake account
     */
    destinationNewBalance: number;
}
export interface Staketransfersv2RequestArgs {
    blockTime?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
        value: number;
    } | number;
    /**
     * amount of lamports transferred
     * `optional field`
     */
    amount?: number;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId?: string;
    /**
     * stake account that is transferring lamports to the destination stake account
     * `optional field`
     */
    sourceStakeAccount?: string;
    /**
     * stake account that is receiving lamports from the source stake account
     * `optional field`
     */
    destinationAccount?: string;
    /**
     * account owner (public key), given authority to stake tokens
     * `optional field`
     */
    authority?: string;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class Staketransfersv2Request extends BaseRequest<Staketransfersv2RequestArgs, PaginatedResponse<Staketransfersv2>> {
    readonly body: Staketransfersv2RequestArgs;
    readonly method = "POST";
    readonly url = "/v0/staking/transfers";
    constructor(body?: Staketransfersv2RequestArgs);
}
