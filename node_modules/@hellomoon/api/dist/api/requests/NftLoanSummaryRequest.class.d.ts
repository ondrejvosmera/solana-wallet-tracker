import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface NftLoanSummary {
    /**
     * NFT Lending Market. One of Citrus, Sharky or Frakt
     */
    market: "Citrus" | "Sharky" | "Frakt" | "Rain";
    /**
     * UTC Blocktime of the offer for the loan
     */
    offerBlocktime: number;
    /**
     * UTC Blocktime of the cancel for the loan, null if it was never cancelled
     */
    cancelBlocktime: number;
    /**
     * UTC Blocktime of the accept for the loan, null if it was never accepted
     */
    acceptBlocktime: number;
    /**
     * UTC Blocktime of the repay for the loan, null if it was never repaid
     */
    repayBlocktime: number;
    /**
     * UTC Blocktime of the extend for the loan, null if it was never extended
     */
    extendBlocktime: number;
    /**
     * UTC Blocktime of the liquidate for the loan, null if it was never liquidated
     */
    liquidateBlocktime: number;
    /**
     * On chain identifier for the loan
     * `optional field`
     */
    loanId: string;
    /**
     * On chain identifier for the new loan, null if it was never extended
     */
    newLoanId: string;
    /**
     * Status of the loan. One of open, cancelled, active, repaid, extended or liquidated
     */
    status: "open" | "cancelled" | "active" | "repaid" | "extended" | "liquidated";
    /**
     * Publickey of the lender
     * `optional field`
     */
    lender: string;
    /**
     * Publickey of the borrower
     * `optional field`
     */
    borrower: string;
    /**
     * Meteplex mint address of the nft being used as collateral
     * `optional field`
     */
    collateralMint: string;
    /**
     * Duration of the loan in seconds
     */
    loanDurationSeconds: number;
    /**
     * Principal amount of the loan that must be repaid
     */
    principalAmount: number;
    /**
     * Amount that must be repaid to the lender
     */
    repayAmount: number;
    /**
     * > To find the correct helloMoonCollectionId, **[click here](https://www.hellomoon.io/id?search=collection)**
     * and search a collection name. This list is continuously updated.
     * `optional field`
     */
    helloMoonCollectionId: string;
    /**
     * Identifier for a collection that the lending protocol uses
     * `optional field`
     */
    protocolCollectionId: string;
    /**
     * The total amount owed on this loan
     */
    amountToRepay: number;
    /**
     * Annual percentage yield of the loan
     */
    apy: number;
    /**
     * Whether the loan was private or not
     */
    isPrivate: boolean;
}
export interface NftLoanSummaryRequestArgs {
    /**
     * Meteplex mint address of the nft being used as collateral
     * `optional field`
     */
    collateralMint?: string;
    status?: "open" | "cancelled" | "active" | "repaid" | "extended" | "liquidated" | Array<"open" | "cancelled" | "active" | "repaid" | "extended" | "liquidated">;
    /**
     * On chain identifier for the loan
     * `optional field`
     */
    loanId?: string;
    market?: "Citrus" | "Sharky" | "Frakt" | "Rain" | Array<"Citrus" | "Sharky" | "Frakt" | "Rain">;
    /**
     * Publickey of the borrower
     * `optional field`
     */
    borrower?: string;
    /**
     * Publickey of the lender
     * `optional field`
     */
    lender?: string;
    /**
     * > To find the correct helloMoonCollectionId, **[click here](https://www.hellomoon.io/id?search=collection)**
     * and search a collection name. This list is continuously updated.
     * `optional field`
     */
    helloMoonCollectionId?: string;
    /**
     * Identifier for a collection that the lending protocol uses
     * `optional field`
     */
    protocolCollectionId?: string;
    offerBlocktime?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * UTC Blocktime of the offer for the loan
     */
        value: number;
    } | number;
    cancelBlocktime?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * UTC Blocktime of the cancel for the loan, null if it was never cancelled
     */
        value: number;
    } | number;
    acceptBlocktime?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * UTC Blocktime of the accept for the loan, null if it was never accepted
     */
        value: number;
    } | number;
    repayBlocktime?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * UTC Blocktime of the repay for the loan, null if it was never repaid
     */
        value: number;
    } | number;
    extendBlocktime?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * UTC Blocktime of the extend for the loan, null if it was never extended
     */
        value: number;
    } | number;
    liquidateBlocktime?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * UTC Blocktime of the liquidate for the loan, null if it was never liquidated
     */
        value: number;
    } | number;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class NftLoanSummaryRequest extends BaseRequest<NftLoanSummaryRequestArgs, PaginatedResponse<NftLoanSummary>> {
    readonly body: NftLoanSummaryRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/nft/loans";
    constructor(body?: NftLoanSummaryRequestArgs);
}
