import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface CitrusLoanEvents {
    /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
    blockTime: number;
    /**
     * Numeric identifier of a block describing the slot that the block was produced in
     */
    blockId: number;
    /**
     * Zero-indexed position of the transaction within the block
     */
    transactionPosition: number;
    /**
     * The zero-indexed position of an instruction - subinstruction combination in the context of the transaction.
     * This is generated by flattening all instruction/subinstruction/sub-subinstruction/... and numbering them
     * from 0.
     */
    instructionOrdinal: number;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId: string;
    /**
     * Address of the pool
     * `optional field`
     */
    collectionConfig: string;
    /**
     * Loan address
     * `optional field`
     */
    loanAccount: string;
    /**
     * When a loan is repayed and reborrowed, this is the loan address of the renewed loan
     */
    newLoanAccount: string;
    actionType: Array<"offer" | "accept_offer" | "cancel_offer" | "request_loan" | "accept_request" | "cancel_request" | "repay" | "reborrow" | "default"> | "offer" | "accept_offer" | "cancel_offer" | "request_loan" | "accept_request" | "cancel_request" | "repay" | "reborrow" | "default";
    /**
     * Pubkey of the address of the lender
     * `optional field`
     */
    lender: string;
    /**
     * Pubkey of the address of the borrower
     * `optional field`
     */
    borrower: string;
    /**
     * nft mint address of the mint that was used as collateral for the loan
     * `optional field`
     */
    collateralMint: string;
    /**
     * The APY of the loan in bps. A value of 18000 means 180% APY
     */
    apyBps: number;
    /**
     * Loan duration in seconds
     */
    loanDurationSeconds: number;
    /**
     * Value of the principal of the loan in SOL
     */
    principalAmount: number;
    /**
     * Amount repayed to the lender in SOL, includes principal and interest
     */
    repayAmount: number;
    /**
     * Fee paid by the borrower
     */
    treasuryAmount: number;
}
export interface CitrusLoanEventsRequestArgs {
    blockTime?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
        value: number;
    } | number;
    /**
     * Loan address
     * `optional field`
     */
    loanAccount?: string;
    actionType?: Array<"offer" | "accept_offer" | "cancel_offer" | "request_loan" | "accept_request" | "cancel_request" | "repay" | "reborrow" | "default"> | "offer" | "accept_offer" | "cancel_offer" | "request_loan" | "accept_request" | "cancel_request" | "repay" | "reborrow" | "default";
    /**
     * Pubkey of the address of the lender
     * `optional field`
     */
    lender?: string;
    /**
     * Pubkey of the address of the borrower
     * `optional field`
     */
    borrower?: string;
    /**
     * nft mint address of the mint that was used as collateral for the loan
     * `optional field`
     */
    collateralMint?: string;
    /**
     * Address of the pool
     * `optional field`
     */
    collectionConfig?: string;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class CitrusLoanEventsRequest extends BaseRequest<CitrusLoanEventsRequestArgs, PaginatedResponse<CitrusLoanEvents>> {
    readonly body: CitrusLoanEventsRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/citrus/loan-events";
    constructor(body?: CitrusLoanEventsRequestArgs);
}
