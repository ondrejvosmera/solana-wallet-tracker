import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface StaratlasPrivateinstructions {
    /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
    blocktime: number;
    /**
     * Numeric identifier of a block describing the slot that the block was produced in
     */
    blockId: number;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId: string;
    /**
     * HelloMoon unique identifier for specific instruction within a transaction
     */
    instructionId: string;
    /**
     * Zero-indexed position of the instruction within the context of a transaction
     */
    instructionposition: number;
    /**
     * Zero-indexed position of sub-instruction within the context of a main instruction
     */
    subinstructionposition: number;
    /**
     * The zero-indexed position of an instruction - subinstruction combination in the context of the transaction.
     * This is generated by flattening all instruction/subinstruction/sub-subinstruction/... and numbering them
     * from 0.
     */
    instructionOrdinal: number;
    /**
     * Zero-indexed position of the transaction within the block
     */
    transactionPosition: number;
    /**
     * The public key (address) of the account containing the program on chain.
     *       > You can also visit https://www.hellomoon.io/id?search=program to search for a program using a
     * user interface.
     */
    programId: string;
    /**
     * a set of  instruction names
     */
    instructionName: string;
    /**
     * The data field contains the transaction details based on the instruction name and id.
     */
    additionalData: string;
}
export interface StaratlasPrivateinstructionsRequestArgs {
    blocktime?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
        value: number;
    } | number;
    /**
     * The public key (address) of the account containing the program on chain.
     *       > You can also visit https://www.hellomoon.io/id?search=program to search for a program using a
     * user interface.
     */
    programId?: string;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class StaratlasPrivateinstructionsRequest extends BaseRequest<StaratlasPrivateinstructionsRequestArgs, PaginatedResponse<StaratlasPrivateinstructions>> {
    readonly body: StaratlasPrivateinstructionsRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/solana/staratlas/additionaldata";
    constructor(body?: StaratlasPrivateinstructionsRequestArgs);
}
