import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface NftMarketplaceTransactions {
    /**
     * Mint address of nft per the spl token program. Each NFT has a unique mint address within the collection.
     * `optional field`
     */
    mint: string;
    /**
     * Price of the NFT in SOL
     */
    price: number;
    /**
     * Seller's wallet address
     */
    seller: string;
    /**
     * Buyer's wallet address
     */
    buyer: string;
    market: Array<"Hadeswap" | "CoralCubeAMM" | "Solanart" | "TensorSwap" | "MEv2" | "BAmKB58MgkeYF2VueVBfASL5q8Qf6VKp4nA4cRuVUVft" | "HtN5ggfDWD5oVFQnxGycsWYxVB7bDzcxkQarA9Lw9uwo"> | "Hadeswap" | "CoralCubeAMM" | "Solanart" | "TensorSwap" | "MEv2" | "BAmKB58MgkeYF2VueVBfASL5q8Qf6VKp4nA4cRuVUVft" | "HtN5ggfDWD5oVFQnxGycsWYxVB7bDzcxkQarA9Lw9uwo";
    transactiontype: Array<"ASK" | "UPDATE_ASK" | "CANCEL_ASK" | "BID" | "UPDATE_BID" | "CANCEL_BID" | "SALE">;
    blockId: {
        value: number;
        operator: "=" | "!=" | "<" | "<=" | ">" | ">=";
    } | {
        greaterThan: number;
        lessThan: number;
        operator: "between";
    };
    /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *       If you want to look at historical data, let's say 7 days in the past.
     *       1. _Change the **operator** to <_
     *       2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *       3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
    blockTime: {
        value: number;
        operator: "=" | "!=" | "<" | "<=" | ">" | ">=";
    } | {
        greaterThan: number;
        lessThan: number;
        operator: "between";
    };
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId: string;
    /**
     * Zero-indexed position of the transaction within the block
     */
    transactionPosition: number;
    /**
     * The zero-indexed position of an instruction - subinstruction combination in the context of the transaction.
     * This is generated by flattening all instruction/subinstruction/sub-subinstruction/... and numbering them
     * from 0.
     */
    instructionOrdinal: number;
    /**
     * The public key (address) of the account containing the program on chain.
     *       > You can also visit https://www.hellomoon.io/id?search=program to search for a program using a
     * user interface.
     */
    programId: string;
}
export interface NftMarketplaceTransactionsRequestArgs {
    /**
     * Mint address of nft per the spl token program. Each NFT has a unique mint address within the collection.
     * `optional field`
     */
    mint?: string;
    blockId?: {
        value: number;
        operator: "=" | "!=" | "<" | "<=" | ">" | ">=";
    } | {
        greaterThan: number;
        lessThan: number;
        operator: "between";
    };
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId?: string;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class NftMarketplaceTransactionsRequest extends BaseRequest<NftMarketplaceTransactionsRequestArgs, PaginatedResponse<NftMarketplaceTransactions>> {
    readonly body: NftMarketplaceTransactionsRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/nft/marketplace/transactions";
    constructor(body?: NftMarketplaceTransactionsRequestArgs);
}
