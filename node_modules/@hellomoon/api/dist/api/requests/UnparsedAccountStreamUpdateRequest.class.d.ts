import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface UnparsedAccountStreamUpdate {
    subscriptionId: string;
    targetValue: string;
}
export interface UnparsedAccountStreamUpdateRequestArgs {
    /**
     * The unique identifier for the subscription
     */
    subscriptionId?: string;
    /**
     * The human readable name for the stream
     */
    name?: string;
    /**
     * An array of program addresses that you want to filter on
     */
    programs?: string[];
    /**
     * An array of account addresses that you want to filter on
     */
    accounts?: string[];
    /**
     * The endpoint that accepts POST requests to deliver events to
     */
    webhookEndpoint?: string;
    /**
     * The method of delivery for the events.  KAKFA is only available to select clients.  If KAFKA is selected,
     * the webhookEndpoint will be ignored
     */
    targetType?: "WEBHOOK" | "KAFKA";
    /**
     * Only used when targetType === WEBHOOK.  This is an optional key:value parameter to help with security
     */
    authDetails?: {
        targetHeader: string;
        targetValue: string;
    };
    /**
     * The API key used to authenticate the Hello Moon service
     */
    apiKey?: string;
}
export declare class UnparsedAccountStreamUpdateRequest extends BaseRequest<UnparsedAccountStreamUpdateRequestArgs, PaginatedResponse<UnparsedAccountStreamUpdate>> {
    readonly body: UnparsedAccountStreamUpdateRequestArgs;
    readonly method = "PUT";
    readonly url = "/v0/accounts/stream/update";
    constructor(body?: UnparsedAccountStreamUpdateRequestArgs);
}
