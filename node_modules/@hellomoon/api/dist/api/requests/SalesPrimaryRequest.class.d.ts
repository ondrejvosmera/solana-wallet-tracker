import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface SalesPrimary {
    /**
     * The program that minted this NFT.
     *     For example, the Candy Machine v2 program helps creators launch their NFT collections and brings
     * their metadata on the Solana blockchain.
     *
     *     **Choose a program address below to query by, each address is mapped to it's program name.**
     *     > cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ = Metaplex NFT Candy Machine v2
     *     > ArAA6CZC123yMJLUe4uisBEgvfuw2WEvex9iFmFCYiXv = nft_candy_machine
     *     > CMZYPASGWeTz7RNGHaRJfCq2XQ5pYK6nDvVQxzkH51zb = Nft Candy Machine
     *     > cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ = Metaplex NFT Candy Machine v1
     */
    mintProgram: "cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ" | "ArAA6CZC123yMJLUe4uisBEgvfuw2WEvex9iFmFCYiXv" | "CMZYPASGWeTz7RNGHaRJfCq2XQ5pYK6nDvVQxzkH51zb" | "cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ";
    /**
     * The mint address of the NFT that was minted and received by the payer.
     * `optional field`
     */
    nftMint: string;
    /**
     * The user account that paid for the NFT to be minted on the mintProgram.
     *         The account will be the owner at the time of the mint, unless it was transferred to another account
     * afterwards.
     * `optional field`
     */
    payer: string;
    /**
     * The token account that created the NFT, before it was minted to the payer.
     *       The payer will pay this account an amount of tokens, NFTs or SOL in exchange for the NFT mint.
     */
    payee: string;
    /**
     * The mint address of the token that is received by the payee in exchange for the mint of the NFT.
     * `optional field`
     */
    paymentMint: string;
    /**
     * Amount paid in paymentMint's native tokens, unconverted for decimals.
     *       > If Amount = 1, it means the payer exchanged a claim token that is related to the creators of
     * the NFT collection for the mint. For example, 1 Trippin' Ape Tribe Mushroom Claim Token was used in exchange
     * for the mint of a MUSHROOM NFT.
     *
     *       > If Amount > 1, The amount is in the source mint's native unit, which is differentiated by it's
     * decimal value.
     *       For example, the amount of 1,000,000 for the source mint of USDC would be 1 USDC since its decimal
     * value is 6.
     */
    amount: number;
    /**
     * **The associated token account**. This program defined the mapping between the payer and the token accounts
     * that they own.
     *       A user may own many token accounts belonging to the same mint address.
     *       The associated token account introduces a way to deterministically map a user to a token account
     * then to the unique mint address.
     * `optional field`
     */
    wallet: string;
    /**
     * > To find the correct helloMoonCollectionId, **[click here](https://www.hellomoon.io/id?search=collection)**
     * and search a collection name. This list is continuously updated.
     * `optional field`
     */
    helloMoonCollectionId: string;
    /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
    blockTime: number;
    /**
     * Numeric identifier of a block describing the slot that the block was produced in
     */
    blockId: number;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId: string;
    /**
     * Zero-indexed position of the transaction within the block
     */
    transactionPosition: number;
    /**
     * The zero-indexed position of an instruction - subinstruction combination in the context of the transaction.
     * This is generated by flattening all instruction/subinstruction/sub-subinstruction/... and numbering them
     * from 0.
     */
    instructionposition: number;
}
export interface SalesPrimaryRequestArgs {
    /**
     * The mint address of the NFT that was minted and received by the payer.
     * `optional field`
     */
    nftMint?: string;
    /**
     * > To find the correct helloMoonCollectionId, **[click here](https://www.hellomoon.io/id?search=collection)**
     * and search a collection name. This list is continuously updated.
     * `optional field`
     */
    helloMoonCollectionId?: string;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId?: string;
    mintProgram?: "cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ" | "ArAA6CZC123yMJLUe4uisBEgvfuw2WEvex9iFmFCYiXv" | "CMZYPASGWeTz7RNGHaRJfCq2XQ5pYK6nDvVQxzkH51zb" | "cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ" | Array<"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ" | "ArAA6CZC123yMJLUe4uisBEgvfuw2WEvex9iFmFCYiXv" | "CMZYPASGWeTz7RNGHaRJfCq2XQ5pYK6nDvVQxzkH51zb" | "cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ">;
    /**
     * The user account that paid for the NFT to be minted on the mintProgram.
     *         The account will be the owner at the time of the mint, unless it was transferred to another account
     * afterwards.
     * `optional field`
     */
    payer?: string;
    /**
     * The mint address of the token that is received by the payee in exchange for the mint of the NFT.
     * `optional field`
     */
    paymentMint?: string;
    /**
     * **The associated token account**. This program defined the mapping between the payer and the token accounts
     * that they own.
     *       A user may own many token accounts belonging to the same mint address.
     *       The associated token account introduces a way to deterministically map a user to a token account
     * then to the unique mint address.
     * `optional field`
     */
    wallet?: string;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class SalesPrimaryRequest extends BaseRequest<SalesPrimaryRequestArgs, PaginatedResponse<SalesPrimary>> {
    readonly body: SalesPrimaryRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/nft/sales/primary";
    constructor(body?: SalesPrimaryRequestArgs);
}
