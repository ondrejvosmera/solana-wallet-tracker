import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface SalesSecondary {
    /**
     * Numeric identifier of a block describing the slot that the block was produced in
     */
    blockId: number;
    marketplace: Array<"SMB" | "ME_V1" | "ME_V2" | "YAWWW" | "Elixir" | "SolSea" | "OpenSea" | "Solanart" | "Hadeswap" | "CoralCube" | "Coral Cube" | "Exchange.Art"> | "SMB" | "ME_V1" | "ME_V2" | "YAWWW" | "Elixir" | "SolSea" | "OpenSea" | "Solanart" | "Hadeswap" | "CoralCube" | "Coral Cube" | "Exchange.Art";
    /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
    blockTime: number;
    /**
     * The mint address of the NFT that was sold to the buyer by the seller.
     * `optional field`
     */
    nftMint: string;
    /**
     * PublicKey of the seller of the NFT
     * `optional field`
     */
    seller: string;
    /**
     * PublicKey of the buyer of the NFT
     * `optional field`
     */
    buyer: string;
    /**
     * The price of the NFT that was sold to the buyer.
     *       _price is denoted in Solana_
     */
    price: number;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId: string;
    /**
     * > To find the correct helloMoonCollectionId, **[click here](https://www.hellomoon.io/id?search=collection)**
     * and search a collection name. This list is continuously updated.
     * `optional field`
     */
    helloMoonCollectionId: string;
}
export interface SalesSecondaryRequestArgs {
    /**
     * > To find the correct helloMoonCollectionId, **[click here](https://www.hellomoon.io/id?search=collection)**
     * and search a collection name. This list is continuously updated.
     * `optional field`
     */
    helloMoonCollectionId?: string;
    /**
     * The mint address of the NFT that was sold to the buyer by the seller.
     * `optional field`
     */
    nftMint?: string;
    /**
     * PublicKey of the buyer of the NFT
     * `optional field`
     */
    buyer?: string;
    /**
     * PublicKey of the seller of the NFT
     * `optional field`
     */
    seller?: string;
    marketplace?: Array<"SMB" | "ME_V1" | "ME_V2" | "YAWWW" | "Elixir" | "SolSea" | "OpenSea" | "Solanart" | "Hadeswap" | "CoralCube" | "Coral Cube" | "Exchange.Art"> | "SMB" | "ME_V1" | "ME_V2" | "YAWWW" | "Elixir" | "SolSea" | "OpenSea" | "Solanart" | "Hadeswap" | "CoralCube" | "Coral Cube" | "Exchange.Art";
    price?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * The price of the NFT that was sold to the buyer.
     *       _price is denoted in Solana_
     */
        value: number;
    } | number;
    blockTime?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
        value: number;
    } | number;
    blockId?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * Numeric identifier of a block describing the slot that the block was produced in
     */
        value: number;
    } | number;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class SalesSecondaryRequest extends BaseRequest<SalesSecondaryRequestArgs, PaginatedResponse<SalesSecondary>> {
    readonly body: SalesSecondaryRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/nft/sales/secondary";
    constructor(body?: SalesSecondaryRequestArgs);
}
