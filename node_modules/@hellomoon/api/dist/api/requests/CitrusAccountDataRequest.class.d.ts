import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface CitrusAccountData {
    /**
     * On chain identifier for the loan
     * `optional field`
     */
    loan: string;
    /**
     * On chain pubkey for the lender
     * `optional field`
     */
    lender: string;
    /**
     * On chain pubkey for the borrower
     * `optional field`
     */
    borrower: string;
    /**
     * On chain pubkey for the collateral mint being used
     * `optional field`
     */
    mint: string;
    /**
     * On chain pubkey for the collection config being used
     * `optional field`
     */
    collectionConfig: string;
    /**
     * The current status of the loan, one of Active, Defaulted, OnSale, Repaid, WaitingForBorrower, WaitingForLender
     * `optional field`
     */
    status: string;
    loanTerms: {
        /**
     * The APY of the loan in basis points
     */
        apyBps: number;
        /**
     * The duration of the loan in seconds
     */
        duration: number;
        /**
     * The principal of the loan in lamports
     */
        principal: number;
    };
    /**
     * The time the loan was created in seconds since epoch
     */
    creationTime: number;
    /**
     * The time the loan started in seconds since epoch
     */
    startTime: number;
    /**
     * The time the loan ended in seconds since epoch
     */
    endTime: number;
    /**
     * Is this a famous fox
     */
    fox: boolean;
    /**
     * Is this a mortgage
     */
    mortgage: boolean;
    /**
     * Is this a private loan
     */
    private: boolean;
    /**
     * The type of offer, one of Borrow, Global
     */
    offerType: string;
    /**
     * The listing price of the loan in lamports
     */
    listingprice: number;
    ltvTerms: {
        /**
     * The LTV of the loan in basis points
     */
        ltvBps: number;
        /**
     * The max offer of the loan in lamports
     */
        maxOffer: number;
    };
    /**
     * > To find the correct helloMoonCollectionId, **[click here](https://www.hellomoon.io/id?search=collection)**
     * and search a collection name. This list is continuously updated.
     * `optional field`
     */
    helloMoonCollectionId: string;
}
export interface CitrusAccountDataRequestArgs {
    /**
     * On chain pubkey for the collateral mint being used
     * `optional field`
     */
    mint?: string;
    /**
     * On chain pubkey for the borrower
     * `optional field`
     */
    borrower?: string;
    /**
     * On chain pubkey for the lender
     * `optional field`
     */
    lender?: string;
    /**
     * The current status of the loan, one of Active, Defaulted, OnSale, Repaid, WaitingForBorrower, WaitingForLender
     * `optional field`
     */
    status?: string;
    /**
     * > To find the correct helloMoonCollectionId, **[click here](https://www.hellomoon.io/id?search=collection)**
     * and search a collection name. This list is continuously updated.
     * `optional field`
     */
    helloMoonCollectionId?: string;
    /**
     * On chain pubkey for the collection config being used
     * `optional field`
     */
    collectionConfig?: string;
    /**
     * On chain identifier for the loan
     * `optional field`
     */
    loan?: string;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class CitrusAccountDataRequest extends BaseRequest<CitrusAccountDataRequestArgs, PaginatedResponse<CitrusAccountData>> {
    readonly body: CitrusAccountDataRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/citrus/account-data";
    constructor(body?: CitrusAccountDataRequestArgs);
}
