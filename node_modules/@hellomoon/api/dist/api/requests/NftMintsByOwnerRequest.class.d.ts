import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface NftMintsByOwner {
    /**
     * Mint address of nft per the spl token program. Each NFT has a unique mint address within the collection.
     * `optional field`
     */
    nftMint: string;
    /**
     * The owner account of the NFT per the SPL token program
     * `optional field`
     */
    ownerAccount: string;
    /**
     * Public key of address holding NFT metadata
     */
    metadataAddress: string;
    /**
     * The NFT on chain metadata
     */
    metadataJson: {
        /**
     * The on-chain name of the token, limited to 32 bytes
     */
        name: string;
        /**
     * The on-chain symbol of the token, limited to 10 bytes
     */
        symbol: string;
        /**
     * The URI of the token, limited to 200 bytes. This URI points to an off-chain JSON file that contains additional
     * data following a certain standard.
     */
        uri: string;
        /**
     * The royalties shared by the creators in basis points â€” i.e. 550 means 5.5%. Whilst this field is used
     * by virtually all NFT marketplaces, it is not enforced by the Token Metadata program itself.
     */
        sellerFeeBasisPoints: number;
        /**
     * An array of creators and their share of the royalties. This array is limited to 5 creators.
     */
        creators: object[];
        /**
     * This field optionally links to the Mint address of another NFT that acts as a Collection NFT.
     */
        collection: {
            /**
     * A boolean indicating if the owner of the Collection NFT signed this NFT. It is important to check this
     * field to ensure the authenticity of the collection.
     */
            verified: boolean;
            /**
     * The public key of the Collection NFT's Mint Account
     */
            key: string;
        };
    };
    /**
     * The public key of the Collection NFT's Mint Account
     */
    nftCollectionMint: string;
    /**
     * Array of verified creators
     */
    verifiedCreators: string[];
    /**
     * > To find the correct helloMoonCollectionId, **[click here](https://www.hellomoon.io/id?search=collection)**
     * and search a collection name. This list is continuously updated.
     * `optional field`
     */
    helloMoonCollectionId: string;
}
export interface NftMintsByOwnerRequestArgs {
    /**
     * Mint address of nft per the spl token program. Each NFT has a unique mint address within the collection.
     * `optional field`
     */
    nftMint?: string;
    /**
     * > To find the correct helloMoonCollectionId, **[click here](https://www.hellomoon.io/id?search=collection)**
     * and search a collection name. This list is continuously updated.
     * `optional field`
     */
    helloMoonCollectionId?: string;
    /**
     * The owner account of the NFT per the SPL token program
     * `optional field`
     */
    ownerAccount?: string;
    /**
     * The public key of the Collection NFT's Mint Account
     */
    nftCollectionMint?: string;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class NftMintsByOwnerRequest extends BaseRequest<NftMintsByOwnerRequestArgs, PaginatedResponse<NftMintsByOwner>> {
    readonly body: NftMintsByOwnerRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/nft/mints-by-owner";
    constructor(body?: NftMintsByOwnerRequestArgs);
}
