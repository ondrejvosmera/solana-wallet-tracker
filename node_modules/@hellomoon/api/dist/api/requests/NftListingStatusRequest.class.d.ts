import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface NftListingStatus {
    /**
     * > To find the correct helloMoonCollectionId, **[click here](https://www.hellomoon.io/id?search=collection)**
     * and search a collection name. This list is continuously updated.
     * `optional field`
     */
    helloMoonCollectionId: string;
    /**
     * Mint address of nft per the spl token program. Each NFT has a unique mint address within the collection.
     * `optional field`
     */
    nftMint: string;
    marketplace: Array<"MEv1" | "MEv2" | "SMB" | "Solanart" | "ExchangeArt" | "TensorSwap"> | "MEv1" | "MEv2" | "SMB" | "Solanart" | "ExchangeArt" | "TensorSwap";
    /**
     * Amount of a token unconverted for decimals, e.g. 1 SOL is 1,000,000,000 since SOL has 9 decimals.
     * `optional field`
     */
    price: number;
    /**
     * the seller of the nft on the marketplace.
     */
    seller: string;
    /**
     * if the NFT is listed or not listed on the marketplace
     * `optional field`
     */
    isListed: boolean;
    /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
    blockTime: number;
    /**
     * Numeric identifier of a block describing the slot that the block was produced in
     */
    blockId: number;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId: string;
    /**
     * Zero-indexed position of the transaction within the block
     */
    transactionPosition: number;
    /**
     * The zero-indexed position of an instruction - subinstruction combination in the context of the transaction.
     * This is generated by flattening all instruction/subinstruction/sub-subinstruction/... and numbering them
     * from 0.
     */
    instructionOrdinal: number;
    /**
     * The account that owns the NFT
     */
    ownerAccount: string;
    /**
     * Token account of a mint owned by the token program (Spl Token Program). It holds information about the
     * tokens owned by a public key
     * `optional field`
     */
    tokenAccount: string;
    /**
     * The name of the NFT Mint
     */
    name: string;
}
export interface NftListingStatusRequestArgs {
    /**
     * > To find the correct helloMoonCollectionId, **[click here](https://www.hellomoon.io/id?search=collection)**
     * and search a collection name. This list is continuously updated.
     * `optional field`
     */
    helloMoonCollectionId?: string;
    /**
     * Mint address of nft per the spl token program. Each NFT has a unique mint address within the collection.
     * `optional field`
     */
    nftMint?: string;
    /**
     * if the NFT is listed or not listed on the marketplace
     * `optional field`
     */
    isListed?: boolean;
    marketplace?: Array<"MEv1" | "MEv2" | "SMB" | "Solanart" | "ExchangeArt" | "TensorSwap"> | "MEv1" | "MEv2" | "SMB" | "Solanart" | "ExchangeArt" | "TensorSwap";
    price?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * Amount of a token unconverted for decimals, e.g. 1 SOL is 1,000,000,000 since SOL has 9 decimals.
     * `optional field`
     */
        value: number;
    } | number;
    blockTime?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
        value: number;
    } | number;
    /**
     * the seller of the nft on the marketplace.
     */
    seller?: string;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class NftListingStatusRequest extends BaseRequest<NftListingStatusRequestArgs, PaginatedResponse<NftListingStatus>> {
    readonly body: NftListingStatusRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/nft/listing-status";
    constructor(body?: NftListingStatusRequestArgs);
}
