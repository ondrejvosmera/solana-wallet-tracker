import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface FraktBondsLoanEvents {
    /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
    blockTime: number;
    /**
     * Numeric identifier of a block describing the slot that the block was produced in
     */
    blockId: number;
    /**
     * First signature in a transaction, which can be used to track and verify the transaction status across
     * the complete ledger.
     *         It is a base-58 encoded string that is uniquely generated for each transaction.
     * `optional field`
     */
    transactionId: string;
    /**
     * The zero-indexed position of an instruction - subinstruction combination in the context of the transaction.
     * This is generated by flattening all instruction/subinstruction/sub-subinstruction/... and numbering them
     * from 0.
     */
    instructionOrdinal: number;
    /**
     * Zero-indexed position of the transaction within the block
     */
    transactionPosition: number;
    /**
     * The public key of the user who initiated the event / the first signer for the transaction
     * `optional field`
     */
    user: string;
    /**
     * The name of the instruction that was executed
     */
    instructionName: "getRepaidCollateral" | "modifyPair" | "depositReturnedSolToLiquidatingBond" | "getRepaidCollateralPnft" | "updateActualReturnedAmount" | "repayFbond" | "liquidateFbond" | "redeemFbonds" | "redeemFbondsFromAutocompoundToPair" | "withdrawSolFromPair" | "initializeAndDepositTokenForNftPair" | "extractCollateralToLiquidate" | "initializeFbond" | "closeVirtualNftSwapPair" | "depositSolToPair" | "redeemFbondsAutoreceiveSol" | "redeemFbondsFromAutocompoundToUser" | "createBondWithSingleCollateralPnft" | "unsetBondCollateralOrSolReceiver" | "createBondWithSingleCollateral" | "claimFbondsFromAutocompoundDeposit" | "extractCollateralToLiquidatePnft" | "initializePair" | "validateAndSellNftToTokenToNftPair";
    /**
     * The unqiue on chain address for the swap pair
     * `optional field`
     */
    pair: string;
    /**
     * The unqiue on chain address for the frakt bond
     * `optional field`
     */
    fBond: string;
    /**
     * The unqiue on chain address for the frakt bond token mint
     */
    fbondtokenmint: string;
    /**
     * The publicKey of the address funds are returned to
     */
    returnfundsowner: string;
    /**
     * The publicKey of the address assets are returned to
     */
    assetReciever: string;
    /**
     * The publicKey of the address sol is returned to
     */
    solReciever: string;
    /**
     * The amount of collateral repaid
     */
    amountRepaid: number;
    /**
     * The unqiue on chain address for the token mint
     */
    tokenmint: string;
    /**
     * The amount of fradkt bond tokens
     */
    fBondtokenamount: number;
    /**
     * The amount of SOL redeemed
     */
    amountredeemed: number;
    /**
     * The amount of collateral withdrawn
     */
    amountwithdrawn: number;
    /**
     * The amount of frakt bonds
     */
    fBondAmount: number;
    /**
     * The amount of SOL sent to the user
     */
    solToUser: number;
    /**
     * The amount of collateral sent to the asset receiver
     */
    fundsToAssetReceiver: number;
    /**
     * The amount of SOL sent to the vault
     */
    solToVault: number;
    /**
     * The price of the frakt bond
     */
    price: number;
    /**
     * The amount of tokens to buy
     */
    amountOfTokensToBuy: number;
    /**
     * The amount of collateral to deposit
     */
    amountToDeposit: number;
    /**
     * The amount of collateral to return
     */
    amountToReturn: number;
    /**
     * The duration of the frakt bond
     */
    bondDuration: number;
    /**
     * The delta params for the swap pair
     */
    pairDeltaParams: number;
    /**
     * The spot price params for the swap pair
     */
    spotPriceParams: number;
    /**
     * The fee params for the swap pair
     */
    feeParams: number;
    /**
     * The bid cap params for the swap pair
     */
    bidCapParams: number;
    /**
     * The bonding curve type for the swap pair
     */
    bondingCurveType: string;
    /**
     * The pair type for the swap pair
     */
    pairType: string;
    /**
     * The new amount to be returned
     */
    newamounttobereturned: number;
    /**
     * The amount returned
     */
    amountReturned: number;
    /**
     * The amount claimed
     */
    amountClaimed: number;
}
export interface FraktBondsLoanEventsRequestArgs {
    blockTime?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * Unix epoch time (in seconds) of a block as calculated from validator votes.
     *     If you want to look at historical data, let's say 7 days in the past.
     *     1. _Change the **operator** to <_
     *     2. Get the **current epochtime** i.e, 1673831466 -> Jan 15, 2023
     *     3. Subtract the current epochtime from **( 86400 * 7 )**. Place the result of 1673831466 - ( 86400
     * * 7 ) = **1673226666** in the value input - this returns the epochtime time from 7 days ago
     */
        value: number;
    } | number;
    /**
     * The public key of the user who initiated the event / the first signer for the transaction
     * `optional field`
     */
    user?: string;
    /**
     * The unqiue on chain address for the frakt bond
     * `optional field`
     */
    fBond?: string;
    /**
     * The unqiue on chain address for the swap pair
     * `optional field`
     */
    pair?: string;
    instructionName?: "getRepaidCollateral" | "modifyPair" | "depositReturnedSolToLiquidatingBond" | "getRepaidCollateralPnft" | "updateActualReturnedAmount" | "repayFbond" | "liquidateFbond" | "redeemFbonds" | "redeemFbondsFromAutocompoundToPair" | "withdrawSolFromPair" | "initializeAndDepositTokenForNftPair" | "extractCollateralToLiquidate" | "initializeFbond" | "closeVirtualNftSwapPair" | "depositSolToPair" | "redeemFbondsAutoreceiveSol" | "redeemFbondsFromAutocompoundToUser" | "createBondWithSingleCollateralPnft" | "unsetBondCollateralOrSolReceiver" | "createBondWithSingleCollateral" | "claimFbondsFromAutocompoundDeposit" | "extractCollateralToLiquidatePnft" | "initializePair" | "validateAndSellNftToTokenToNftPair" | Array<"getRepaidCollateral" | "modifyPair" | "depositReturnedSolToLiquidatingBond" | "getRepaidCollateralPnft" | "updateActualReturnedAmount" | "repayFbond" | "liquidateFbond" | "redeemFbonds" | "redeemFbondsFromAutocompoundToPair" | "withdrawSolFromPair" | "initializeAndDepositTokenForNftPair" | "extractCollateralToLiquidate" | "initializeFbond" | "closeVirtualNftSwapPair" | "depositSolToPair" | "redeemFbondsAutoreceiveSol" | "redeemFbondsFromAutocompoundToUser" | "createBondWithSingleCollateralPnft" | "unsetBondCollateralOrSolReceiver" | "createBondWithSingleCollateral" | "claimFbondsFromAutocompoundDeposit" | "extractCollateralToLiquidatePnft" | "initializePair" | "validateAndSellNftToTokenToNftPair">;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class FraktBondsLoanEventsRequest extends BaseRequest<FraktBondsLoanEventsRequestArgs, PaginatedResponse<FraktBondsLoanEvents>> {
    readonly body: FraktBondsLoanEventsRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/frakt/loan-events/bonds";
    constructor(body?: FraktBondsLoanEventsRequestArgs);
}
