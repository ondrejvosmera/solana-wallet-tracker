import { BaseRequest } from "../BaseRequest.class";
import type { PaginatedResponse } from "../Response.interface";
export interface ZeebitEventTypes {
    /**
     * The game specification.
     */
    gamespec: string;
    /**
     * The game instance.
     */
    gameinstance: string;
    /**
     * The owner of the game.
     */
    owner: string;
    /**
     * The player of the game.
     */
    player: string;
    /**
     * The token used in the game.
     */
    token: string;
    /**
     * The type of the game.
     */
    gametype: string;
    /**
     * The nonce of the game instance.
     */
    gameinstancenonce: string;
    /**
     * The ID of the bet.
     */
    betid: string;
    /**
     * The wager of the game.
     */
    wager: string;
    /**
     * The liability of the game.
     */
    liability: string;
    /**
     * The expected edge of the game.
     */
    expectededge: string;
    /**
     * The configuration of the bet.
     */
    betconfig: string;
    /**
     * The timestamp of the game.
     */
    timestamp: number;
    /**
     * The avatar of the player.
     */
    avatar: string;
    /**
     * The username of the player.
     */
    username: string;
    /**
     * The foreign exchange rate per billion.
     */
    fxrateperbillion: number;
    /**
     * The outcome of the bet.
     */
    betoutcome: string;
    /**
     * The payout of the game.
     */
    payout: string;
    /**
     * Whether the bet is free or not.
     */
    isfreebet: boolean;
    /**
     * The request of the game.
     */
    request: string;
    /**
     * The configuration of the game instance.
     */
    gameinstanceconfig: string;
    /**
     * The configuration of the game.
     */
    config: string;
    /**
     * The result of the game.
     */
    result: string;
    /**
     * The lookup table of the game.
     */
    lookuptable: string;
    /**
     * The authority of the game.
     */
    authority: string;
    /**
     * The recipient of the rent.
     */
    rentrecipient: string;
    /**
     * The lamports recovered from the game.
     */
    lamportsrecovered: string;
    /**
     * The close slot of the game.
     */
    closeslot: string;
    /**
     * The payer of the game.
     */
    payer: string;
    /**
     * The deactivation slot of the game.
     */
    deactivationslot: string;
    /**
     * The house of the game.
     */
    house: string;
    /**
     * The platform of the game.
     */
    platform: string;
    /**
     * The amount of the game.
     */
    amount: string;
    /**
     * The dispatcher of the game.
     */
    dispatcher: string;
    /**
     * The receiver of the rent.
     */
    rentreceiver: string;
    /**
     * The provider assigned to the game.
     */
    assignedprovider: string;
    /**
     * The callback program of the game.
     */
    callbackprogram: string;
    /**
     * The lookup table of the callback.
     */
    callbacklookuptable: string;
    /**
     * The type of the callback table.
     */
    callbacktabletype: string;
    /**
     * The seed of the client.
     */
    clientseed: string;
    /**
     * The nonce of the game.
     */
    nonce: string;
    /**
     * The slot number after the game.
     */
    afterslotnumber: string;
    /**
     * The timestamp after the game.
     */
    aftertimestamp: string;
    /**
     * The reward of the game.
     */
    reward: string;
    /**
     * The provider of the game.
     */
    provider: string;
    /**
     * The slot number of the response.
     */
    responseslotnumber: string;
    /**
     * The timestamp of the response.
     */
    responsetimestamp: string;
    /**
     * The slot used in the game.
     */
    slotused: string;
    /**
     * The block hash used in the game.
     */
    blockhashused: string;
    /**
     * The response of the game.
     */
    response: string;
    /**
     * Whether the callback was executed or not.
     */
    callbackexecuted: string;
    /**
     * The date of the reward.
     */
    rewarddate: string;
    /**
     * The type of the reward.
     */
    rewardtype: string;
    /**
     * What the game relates to.
     */
    relatesto: string;
    /**
     * The base value of the game.
     */
    valuebase: string;
    /**
     * The upfront amount of the token.
     */
    tokenamountupfront: string;
    /**
     * The spread amount of the token.
     */
    tokenamountspread: string;
    /**
     * The spread days of the game.
     */
    spreaddays: string;
    /**
     * The referrer of the game.
     */
    referrer: string;
    /**
     * The liability token of the game.
     */
    liabilitytoken: string;
    /**
     * The wager token of the game.
     */
    wagertoken: string;
    /**
     * The experience points of the game.
     */
    xp: string;
    /**
     * The accrued base of the rakeback.
     */
    rakebackaccruedbase: string;
    /**
     * The accrued base of the bonus.
     */
    bonusaccruedbase: string;
    /**
     * The accrued base of the referral.
     */
    referralaccruedbase: string;
    /**
     * The reserve token of the reward.
     */
    rewardreservetoken: string;
    /**
     * The revenue share token of the platform.
     */
    platformrevenuesharetoken: string;
    /**
     * The revenue share token of the protocol.
     */
    protocolrevenuesharetoken: string;
    /**
     * The expected edge token of the liquidity provider.
     */
    lpexpectededgetoken: string;
    /**
     * The liability released from the game.
     */
    liabilityreleased: string;
    /**
     * The wager returned from the game.
     */
    wagerreturned: string;
    /**
     * The experience points reverted from the game.
     */
    xpreverted: string;
    /**
     * The rakeback reverted from the game.
     */
    rakebackreverted: string;
    /**
     * The revenue share reverted from the platform.
     */
    platformrevenuesharereverted: string;
    /**
     * The revenue share reverted from the referral.
     */
    referralrevenuesharereverted: string;
    /**
     * The revenue share reverted from the protocol.
     */
    protocolrevenuesharereverted: string;
    /**
     * The expected edge reverted from the liquidity provider.
     */
    lpexpectededgereverted: string;
    /**
     * The token released as liability.
     */
    liabilityreleasedtoken: string;
    /**
     * The token paid out.
     */
    payouttoken: string;
    /**
     * The type of the event.
     * `optional field`
     */
    event_type: string;
    /**
     * The time of the block.
     */
    block_time: number;
    /**
     * The ID of the program.
     * `optional field`
     */
    program_id: string;
    /**
     * The ID of the transaction.
     * `optional field`
     */
    transaction_id: string;
}
export interface ZeebitEventTypesRequestArgs {
    /**
     * The type of the event.
     * `optional field`
     */
    event_type?: string;
    block_time?: {
        operator: "=" | "!=" | ">" | "<" | ">=" | "<=";
        /**
     * The time of the block.
     */
        value: number;
    } | number;
    /**
     * The ID of the program.
     * `optional field`
     */
    program_id?: string;
    /**
     * The ID of the transaction.
     * `optional field`
     */
    transaction_id?: string;
    /**
     * The number of results to return per page
     * `optional field`
     */
    limit?: number;
    /**
     * The page number to return
     * `optional field`
     */
    page?: number;
    /**
     * The pagination token to use to keep your position in the results
     * `optional field`
     */
    paginationToken?: string;
}
export declare class ZeebitEventTypesRequest extends BaseRequest<ZeebitEventTypesRequestArgs, PaginatedResponse<ZeebitEventTypes>> {
    readonly body: ZeebitEventTypesRequestArgs;
    readonly method = "POST";
    readonly url = "/v0/hello-moon/zeebit/event_types";
    constructor(body?: ZeebitEventTypesRequestArgs);
}
