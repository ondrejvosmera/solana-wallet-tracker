import { BaseRequest } from "../api/BaseRequest.class";
type DisconnectFn = () => void;
interface JsonRpcResponseBase {
    id?: string | number;
    jsonrpc: "2.0";
}
interface JsonRpcErrorData {
    __type: "Error";
    statusCode?: number;
    message: any;
}
interface JsonRpcResponseSuccess extends JsonRpcResponseBase {
    result: any;
}
interface JsonRpcResponseError extends JsonRpcResponseBase {
    error: JsonRpcErrorData;
}
type JsonRpcResponse = JsonRpcResponseSuccess | JsonRpcResponseError;
type Callback<TData = JsonRpcResponse> = (data: TData) => void;
export declare const isStreamError: (data: any) => data is JsonRpcErrorData;
export declare class StreamClient {
    private readonly _client;
    private _callbackMap;
    constructor(apiKey: string);
    private _addCallback;
    connect(fallback?: Callback): Promise<DisconnectFn>;
    send<TData>(request: BaseRequest<any, TData>): Promise<TData>;
    subscribe<TData>(subscriptionId: string, callback: Callback<TData[]>, errorCallback?: Callback<JsonRpcErrorData>): () => void;
    disconnect(): void;
}
export {};
