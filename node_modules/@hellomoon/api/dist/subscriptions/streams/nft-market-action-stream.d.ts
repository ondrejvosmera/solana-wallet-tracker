import { DataStreamCompositeTypeFilter, DataStreamFilterDate, DataStreamFilterNumeric, DataStreamFilterText, DataStreamFilterEnum, DataStreamType } from "../util/datastream-filters.const";
import type { DataStreamFieldMap } from "../models/data-stream-field-map.interface";
import { BaseDataStream } from "../models/base-data-stream.class";
interface NftMarketActionStreamFilter {
    [key: string]: DataStreamType<string>;
    helloMoonCollectionId: DataStreamFilterText;
    collectionName: DataStreamFilterText;
    price: DataStreamFilterNumeric;
    authority: DataStreamCompositeTypeFilter<DataStreamFilterText, "seller" | "buyer">;
    marketName: DataStreamFilterEnum<"MEv1" | "MEv2" | "Solanart" | "SolanartAuction" | "SMB" | "Yawww" | "SolSea" | "AuctionHouse" | "OpenSeaAuctionHouse" | "CoralCubeAuctionHouse" | "ExchangeArt" | "Hadeswap" | "TensorSwap" | "CoralCubeAMM">;
    marketActionType: DataStreamFilterEnum<"ASK" | "UPDATE_ASK" | "CANCEL_ASK" | "BID" | "UPDATE_BID" | "CANCEL_BID" | "SALE">;
    mint: DataStreamFilterText;
    programId: DataStreamFilterText;
    instructionName: DataStreamFilterText;
    blockTime: DataStreamFilterDate;
    blockId: DataStreamFilterNumeric;
    transactionId: DataStreamFilterText;
    transactionPosition: DataStreamFilterNumeric;
    instructionOrdinal: DataStreamFilterNumeric;
}
export declare class NftMarketActionStream extends BaseDataStream<NftMarketActionStreamFilter> {
    id: string;
    static fieldMap: Record<string, DataStreamFieldMap>;
}
export {};
