import { DataStreamCompositeTypeFilter, DataStreamFilterDate, DataStreamFilterNumeric, DataStreamFilterText, DataStreamType } from "../util/datastream-filters.const";
import type { DataStreamFieldMap } from "../models/data-stream-field-map.interface";
import { BaseDataStream } from "../models/base-data-stream.class";
interface TokenTransferStreamFilter {
    [key: string]: DataStreamType<string>;
    mint: DataStreamFilterText;
    amount: DataStreamFilterNumeric;
    authority: DataStreamFilterText;
    owner: DataStreamCompositeTypeFilter<DataStreamFilterText, "sourceOwner" | "destinationOwner">;
    account: DataStreamCompositeTypeFilter<DataStreamFilterText, "source" | "destination">;
    preBalances: DataStreamCompositeTypeFilter<DataStreamFilterNumeric, "sourcePreBalance" | "destinationPreBalance">;
    postBalances: DataStreamCompositeTypeFilter<DataStreamFilterNumeric, "sourcePostBalance" | "destinationPostBalance">;
    programId: DataStreamFilterText;
    type: DataStreamFilterText;
    blockTime: DataStreamFilterDate;
    blockId: DataStreamFilterNumeric;
    transactionId: DataStreamFilterText;
    transactionPosition: DataStreamFilterNumeric;
    instructionPosition: DataStreamFilterNumeric;
    subInstructionPosition: DataStreamFilterNumeric;
    instructionOrdinal: DataStreamFilterNumeric;
    outerInstructionProgramId: DataStreamFilterText;
}
export declare class TokenTransferStream extends BaseDataStream<TokenTransferStreamFilter> {
    id: string;
    static fieldMap: Record<string, DataStreamFieldMap>;
}
export {};
