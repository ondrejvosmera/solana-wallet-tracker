import { DataStreamCompositeTypeFilter, DataStreamFilterDate, DataStreamFilterNumeric, DataStreamFilterText, DataStreamFilterEnum, DataStreamType } from "../util/datastream-filters.const";
import type { DataStreamFieldMap } from "../models/data-stream-field-map.interface";
import { BaseDataStream } from "../models/base-data-stream.class";
interface LpDepositWithdrawalStreamFilter {
    [key: string]: DataStreamType<string>;
    blockId: DataStreamFilterNumeric;
    blockTime: DataStreamFilterDate;
    transactionId: DataStreamFilterText;
    transactionPosition: DataStreamFilterNumeric;
    instructionOrdinal: DataStreamFilterNumeric;
    programId: DataStreamFilterText;
    instructionName: DataStreamFilterText;
    poolAddress: DataStreamFilterText;
    lpTokenMint: DataStreamFilterText;
    userAccount: DataStreamFilterText;
    actionType: DataStreamFilterEnum<"addLiquidity" | "removeLiquidity">;
    tokenMint: DataStreamCompositeTypeFilter<DataStreamFilterText, "mintTokenA" | "mintTokenB">;
    tokenAmount: DataStreamCompositeTypeFilter<DataStreamFilterText, "amountTokenA" | "amountTokenB">;
}
export declare class LpDepositWithdrawalStream extends BaseDataStream<LpDepositWithdrawalStreamFilter> {
    id: string;
    static fieldMap: Record<string, DataStreamFieldMap>;
}
export {};
