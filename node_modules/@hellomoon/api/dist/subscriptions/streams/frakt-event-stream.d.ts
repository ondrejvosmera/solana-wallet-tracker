import { DataStreamFilterDate, DataStreamFilterNumeric, DataStreamFilterText, DataStreamFilterEnum, DataStreamType } from "../util/datastream-filters.const";
import type { DataStreamFieldMap } from "../models/data-stream-field-map.interface";
import { BaseDataStream } from "../models/base-data-stream.class";
interface FraktEventStreamFilter {
    [key: string]: DataStreamType<string>;
    blockId: DataStreamFilterNumeric;
    blockTime: DataStreamFilterDate;
    transactionId: DataStreamFilterText;
    transactionPosition: DataStreamFilterNumeric;
    instructionOrdinal: DataStreamFilterNumeric;
    eventType: DataStreamFilterEnum<"DEPOSIT_LIQUIDITY" | "WITHDRAW_LIQUIDITY" | "INITIALIZE_PRICE_BASED_LIQUIDITY_POOL" | "UPDATE_PRICE_BASED_LIQUIDITY_POOL" | "INITIALIZE_COLLECTION_INFO" | "UPDATE_COLLECTION_INFO" | "PROPOSE_LOAN" | "REJECT_LOAN_BY_ADMIN" | "CLOSE_LOAN" | "APPROVE_LOAN_BY_ADMIN" | "PAYBACK_LOAN" | "LIQUIDATE_NFT_TO_RAFFLES" | "LIQUIDATE_LOAN_BY_ADMIN" | "PUT_LOAN_TO_LIQUIDATION_RAFFLES" | "STOP_LIQUIDATION_RAFFLES_BY_ADMIN" | "INITIALIZE_NFT_ATTEMPTS" | "GET_LOT_TICKET" | "REVEAL_LOT_TICKET_BY_ADMIN" | "REJECT_LOT_TICKET_BY_ADMIN" | "REDEEM_WINNING_LOT_TICKET" | "TOPUP_FROM_LIQ_LOANS" | "WITHDRAW_FROM_RESERVE_FUND">;
    programId: DataStreamFilterText;
    instructionName: DataStreamFilterText;
    "lender.adminPaymentAmount": DataStreamFilterNumeric;
    "lender.lender": DataStreamFilterText;
    "lender.liquidityPool": DataStreamFilterText;
    "lender.liquidityOwner": DataStreamFilterText;
    "lender.lenderWithdrawAmount": DataStreamFilterNumeric;
    "lender.depositAmount": DataStreamFilterNumeric;
    "lender.depositAccount": DataStreamFilterText;
    "lender.withdrawAmount": DataStreamFilterNumeric;
    "lender.withdrawAccount": DataStreamFilterText;
    "lender.admin": DataStreamFilterText;
    "lender.depositBump": DataStreamFilterNumeric;
    "lender.baseBorrowRate": DataStreamFilterNumeric;
    "lender.variableSlope1": DataStreamFilterNumeric;
    "lender.variableSlope2": DataStreamFilterNumeric;
    "lender.utilizationRateOptimal": DataStreamFilterNumeric;
    "lender.reserveFactor": DataStreamFilterNumeric;
    "lender.borrowCommission": DataStreamFilterNumeric;
    "lender.depositCommission": DataStreamFilterNumeric;
    "collectionInfo.creator": DataStreamFilterText;
    "collectionInfo.pricingLookup": DataStreamFilterText;
    "collectionInfo.liquidityPool": DataStreamFilterText;
    "collectionInfo.collectionInfoAccount": DataStreamFilterText;
    "collectionInfo.royaltyAccount": DataStreamFilterText;
    "collectionInfo.admin": DataStreamFilterText;
    "collectionInfo.loanToValue": DataStreamFilterNumeric;
    "collectionInfo.collaterizationRate": DataStreamFilterNumeric;
    "collectionInfo.royaltyFeeTime": DataStreamFilterNumeric;
    "collectionInfo.royaltyFeePrice": DataStreamFilterNumeric;
    "collectionInfo.expirationTime": DataStreamFilterNumeric;
    "loan.adminPaymentAmount": DataStreamFilterNumeric;
    "loan.liquidityPool": DataStreamFilterText;
    "loan.liquidityOwner": DataStreamFilterText;
    "loan.collectionInfoAccount": DataStreamFilterText;
    "loan.communityPoolsAuthority": DataStreamFilterText;
    "loan.loan": DataStreamFilterText;
    "loan.borrower": DataStreamFilterText;
    "loan.nft": DataStreamFilterText;
    "loan.borrowerNftTokenAccount": DataStreamFilterText;
    "loan.vaultNftTokenAccount": DataStreamFilterText;
    "loan.adminNftTokenAccount": DataStreamFilterText;
    "loan.originalPriceFromBorrower": DataStreamFilterNumeric;
    "loan.loanToValue": DataStreamFilterNumeric;
    "loan.adminRefundAmount": DataStreamFilterNumeric;
    "loan.nftPrice": DataStreamFilterNumeric;
    "loan.discount": DataStreamFilterNumeric;
    "loan.loanAmount": DataStreamFilterNumeric;
    "loan.royaltyAccount": DataStreamFilterText;
    "loan.royaltyPaymentAmount": DataStreamFilterNumeric;
    "loan.paybackAmount": DataStreamFilterNumeric;
    "loan.gracePeriod": DataStreamFilterNumeric;
    "loan.liquidationLot": DataStreamFilterText;
    "loan.admin": DataStreamFilterText;
    "loan.amountToLiqOwner": DataStreamFilterNumeric;
    "loan.nftAmount": DataStreamFilterNumeric;
    "loan.liquidator": DataStreamFilterText;
    "loan.nftMetadata": DataStreamFilterText;
    "loan.tokenRecordInfo": DataStreamFilterText;
    "loan.destTokenRecord": DataStreamFilterText;
    "loan.ownerTokenRecord": DataStreamFilterText;
    "loan.lotTicket": DataStreamFilterText;
    "loan.nftAttempts": DataStreamFilterText;
    "loan.nftLiquidationAmount": DataStreamFilterNumeric;
    "loan.attemptsNftMint": DataStreamFilterText;
    "loan.nftAttemptsBump": DataStreamFilterNumeric;
    "loan.lotTicketIsWinning": DataStreamFilterText;
    "loan.liquidatorNftTokenAccount": DataStreamFilterText;
    "admin.liquidityPool": DataStreamFilterText;
    "admin.liquidityOwner": DataStreamFilterText;
    "admin.admin": DataStreamFilterText;
    "admin.depositAmount": DataStreamFilterNumeric;
    "admin.withdrawAmount": DataStreamFilterNumeric;
}
export declare class FraktEventStream extends BaseDataStream<FraktEventStreamFilter> {
    id: string;
    static fieldMap: Record<string, DataStreamFieldMap>;
}
export {};
