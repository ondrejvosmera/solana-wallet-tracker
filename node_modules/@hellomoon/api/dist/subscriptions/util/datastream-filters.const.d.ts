import type { DSBFieldValue } from "../models/datastream-field.type";
export interface DataStreamType<TType extends string> {
    type: TType;
}
export type TFieldValue = string | number | boolean | undefined;
export interface DataStreamTypeFilter<TType extends string, TValue extends TFieldValue> extends DSBFieldValue<TValue>, DataStreamType<TType> {
}
export interface DataStreamOrTypeFilter<TType extends string, TValue extends TFieldValue> extends DataStreamType<"OR"> {
    filters: DataStreamTypeFilter<TType, TValue>[];
}
export interface DataStreamAndTypeFilter<TType extends string, TValue extends TFieldValue> extends DataStreamType<"AND"> {
    filters: Array<DataStreamTypeFilter<TType, TValue> | DataStreamOrTypeFilter<"OR", TValue>>;
}
export interface DataStreamCompositeTypeFilter<TFilter extends DataStreamType<string>, TFields extends string> extends DataStreamType<"COMPOSITE"> {
    fields: TFields[];
    filter: TFilter;
}
export declare const dataStreamCompositeFilter: <TType extends string, TValue extends TFieldValue>(filter: DataStreamTypeFilter<TType, TValue> | DataStreamOrTypeFilter<TType, TValue>, fields: string[]) => {
    type: string;
    filter: DataStreamTypeFilter<TType, TValue> | DataStreamOrTypeFilter<TType, TValue>;
    fields: string[];
};
export type DataStreamFilterText = DataStreamTypeFilter<"TEXT", string> | DataStreamOrTypeFilter<"TEXT", string>;
export type DataStreamFilterNumeric = DataStreamTypeFilter<"NUMERIC", number> | DataStreamOrTypeFilter<"NUMERIC", number> | DataStreamAndTypeFilter<"NUMERIC", number>;
export type DataStreamFilterDate = DataStreamTypeFilter<"DATE", number> | DataStreamOrTypeFilter<"DATE", number>;
export type DataStreamFilterBoolean = DataStreamTypeFilter<"BOOLEAN", boolean>;
export type DataStreamFilterEnum<TEnum extends string> = DataStreamTypeFilter<"ENUM", TEnum>;
export declare const dataStreamFilters: {
    boolean: {
        equals: (value: boolean) => DataStreamTypeFilter<"BOOLEAN", boolean>;
    };
    composite: <TType extends string, TValue extends TFieldValue>(filter: DataStreamTypeFilter<TType, TValue> | DataStreamOrTypeFilter<TType, TValue>, fields: string[]) => {
        type: string;
        filter: DataStreamTypeFilter<TType, TValue> | DataStreamOrTypeFilter<TType, TValue>;
        fields: string[];
    };
    date: {
        equals: (value: Date) => DataStreamTypeFilter<"DATE", number>;
        notEquals: (value: Date) => DataStreamTypeFilter<"DATE", number>;
        greaterThan: (value: Date) => DataStreamTypeFilter<"DATE", number>;
        greaterThanEquals: (value: Date) => DataStreamTypeFilter<"DATE", number>;
        lessThan: (value: Date) => DataStreamTypeFilter<"DATE", number>;
        lessThanEquals: (value: Date) => DataStreamTypeFilter<"DATE", number>;
        or: (...filters: DataStreamTypeFilter<"DATE", number>[]) => DataStreamOrTypeFilter<"DATE", number>;
        between: (min: Date, max: Date) => DataStreamTypeFilter<"DATE", number>;
    };
    numeric: {
        equals: (value: number) => DataStreamTypeFilter<"NUMERIC", number>;
        notEquals: (value: number) => DataStreamTypeFilter<"NUMERIC", number>;
        greaterThan: (value: number) => DataStreamTypeFilter<"NUMERIC", number>;
        greaterThanEquals: (value: number) => DataStreamTypeFilter<"NUMERIC", number>;
        lessThan: (value: number) => DataStreamTypeFilter<"NUMERIC", number>;
        lessThanEquals: (value: number) => DataStreamTypeFilter<"NUMERIC", number>;
        between: (min: number, max: number) => DataStreamTypeFilter<"NUMERIC", number>;
        or: (...filters: DataStreamTypeFilter<"NUMERIC", number>[]) => DataStreamOrTypeFilter<"NUMERIC", number>;
        and: (...filters: DataStreamTypeFilter<"NUMERIC", number>[]) => DataStreamAndTypeFilter<"NUMERIC", number>;
    };
    text: {
        equals: (value: string) => DataStreamTypeFilter<"TEXT", string>;
        notEquals: (value: string) => DataStreamTypeFilter<"TEXT", string>;
        or: (...filters: DataStreamTypeFilter<"TEXT", string>[]) => DataStreamOrTypeFilter<"TEXT", string>;
    };
    enum: {
        equals: <TEnumValue extends string>(value: TEnumValue) => DataStreamTypeFilter<"ENUM", TEnumValue>;
        notEquals: <TEnumValue_1 extends string>(value: TEnumValue_1) => DataStreamTypeFilter<"ENUM", TEnumValue_1>;
        or: <TEnumValue_2 extends string>(...filters: DataStreamTypeFilter<"ENUM", TEnumValue_2>[]) => DataStreamOrTypeFilter<"ENUM", TEnumValue_2>;
    };
    is: {
        and: (value: DataStreamType<string>) => value is DataStreamAndTypeFilter<string, TFieldValue>;
        boolean: (value: DataStreamType<string>) => value is DataStreamTypeFilter<"BOOLEAN", boolean>;
        composite: (value: DataStreamType<string>) => value is DataStreamCompositeTypeFilter<DataStreamType<string>, string>;
        date: (value: DataStreamType<string>) => value is DataStreamTypeFilter<"DATE", number>;
        numeric: (value: DataStreamType<string>) => value is DataStreamTypeFilter<"NUMERIC", number>;
        or: (value: DataStreamType<string>) => value is DataStreamOrTypeFilter<string, TFieldValue>;
        text: (value: DataStreamType<string>) => value is DataStreamTypeFilter<"TEXT", string>;
        enum: (value: DataStreamType<string>) => value is DataStreamTypeFilter<"ENUM", string>;
    };
};
