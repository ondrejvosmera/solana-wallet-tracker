"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const datastream_filters_const_1 = require("./datastream-filters.const");
const json_logic_util_fn_1 = require("./json-logic-util.fn");
/**
 * N.b. We updated the spec of the serialization logic.
 * These unit tests are for direct serialization to JSON Logic:
 *  see: https://jsonlogic.com/
 * However, this serialization now happens in the `chalice-api` repo.
 * Therefore, we are skipping these tests, but we should rewrite them
 * at a later date.
 */
describe.skip("JsonLogicUtil", () => {
    it("undefined and empty fields returns the default value", () => {
        expect(json_logic_util_fn_1.jsonLogicUtil.serialize()).toBe(`{"==":[true,true]}`);
        expect(json_logic_util_fn_1.jsonLogicUtil.serialize({})).toBe(`{"==":[true,true]}`);
    });
    it("serializes boolean field", () => {
        const values = [true, false];
        for (let i = 0; i < values.length; i++) {
            const value = values[i];
            expect(json_logic_util_fn_1.jsonLogicUtil.serialize({
                testField: {
                    type: "BOOLEAN",
                    values: [value],
                    operator: "==",
                },
            })).toBe(JSON.stringify({
                and: [
                    {
                        or: [{ "==": [{ var: "testField" }, value] }],
                    },
                ],
            }));
        }
    });
    it("serializes text field", () => {
        const operators = ["==", "!="];
        for (let i = 0; i < operators.length; i++) {
            const operator = operators[i];
            expect(json_logic_util_fn_1.jsonLogicUtil.serialize({
                testField: {
                    type: "TEXT",
                    values: ["sol11111111111111111111111111"],
                    operator,
                },
            })).toBe(JSON.stringify({
                and: [
                    {
                        or: [
                            {
                                [operator]: [
                                    { var: "testField" },
                                    "sol11111111111111111111111111",
                                ],
                            },
                        ],
                    },
                ],
            }));
        }
    });
    it("serializes date field", () => {
        const operators = ["==", "!="];
        const date = new Date("2023-01-30T00:00:00Z");
        for (let i = 0; i < operators.length; i++) {
            const operator = operators[i];
            expect(json_logic_util_fn_1.jsonLogicUtil.serialize({
                testField: {
                    type: "DATE",
                    values: [date.getTime()],
                    operator,
                },
            })).toBe(JSON.stringify({
                and: [
                    {
                        or: [
                            { [operator]: [{ var: "testField" }, date.getTime() / 1000] },
                        ],
                    },
                ],
            }));
        }
    });
    it("serializes or field", () => {
        expect(json_logic_util_fn_1.jsonLogicUtil.serialize({
            testField: {
                type: "OR",
                filters: [
                    {
                        type: "TEXT",
                        operator: "==",
                        values: ["ABC"],
                    },
                    {
                        type: "TEXT",
                        operator: "!=",
                        values: ["CDE"],
                    },
                ],
            },
        })).toBe(JSON.stringify({
            and: [
                {
                    or: [
                        { "==": [{ var: "testField" }, "ABC"] },
                        { "!=": [{ var: "testField" }, "CDE"] },
                    ],
                },
            ],
        }));
    });
    it("serializes composite field", () => {
        expect(json_logic_util_fn_1.jsonLogicUtil.serialize({
            testField: {
                type: "COMPOSITE",
                filter: {
                    type: "TEXT",
                    operator: "==",
                    values: ["ABC"],
                },
                fields: ["srcTestField", "dstTestField"],
            },
        })).toBe(JSON.stringify({
            and: [
                {
                    or: [
                        {
                            or: [
                                { "==": [{ var: "srcTestField" }, "ABC"] },
                                { "==": [{ var: "dstTestField" }, "ABC"] },
                            ],
                        },
                    ],
                },
            ],
        }));
    });
    it("serializes composite field with single value", () => {
        expect(json_logic_util_fn_1.jsonLogicUtil.serialize({
            testField: {
                type: "COMPOSITE",
                filter: {
                    type: "TEXT",
                    operator: "==",
                    values: ["ABC"],
                },
                fields: ["dstTestField"],
            },
        })).toBe(JSON.stringify({
            and: [
                {
                    or: [{ "==": [{ var: "dstTestField" }, "ABC"] }],
                },
            ],
        }));
    });
    it("serializes multiple fields", () => {
        expect(json_logic_util_fn_1.jsonLogicUtil.serialize({
            testField: {
                type: "TEXT",
                values: ["sol11111111111111111111111111"],
                operator: "==",
            },
            numericField: {
                type: "NUMERIC",
                values: [34234],
                operator: "==",
            },
        })).toBe(JSON.stringify({
            and: [
                {
                    or: [
                        {
                            ["=="]: [{ var: "testField" }, "sol11111111111111111111111111"],
                        },
                    ],
                },
                {
                    or: [
                        {
                            ["=="]: [{ var: "numericField" }, 34234],
                        },
                    ],
                },
            ],
        }));
    });
    it("serializes between value", () => {
        expect(json_logic_util_fn_1.jsonLogicUtil.serialize({
            numericField: {
                type: "NUMERIC",
                values: [1, 100],
                operator: "between",
            },
        })).toBe(JSON.stringify({
            and: [
                {
                    or: [
                        {
                            ["<="]: [1, { var: "numericField" }, 100],
                        },
                    ],
                },
            ],
        }));
    });
    it("serializes and field", () => {
        expect(json_logic_util_fn_1.jsonLogicUtil.serialize({
            numericField: datastream_filters_const_1.dataStreamFilters.numeric.and(datastream_filters_const_1.dataStreamFilters.numeric.greaterThan(1), datastream_filters_const_1.dataStreamFilters.numeric.lessThan(100)),
        })).toBe(JSON.stringify({
            and: [
                {
                    or: [
                        {
                            [">"]: [{ var: "numericField" }, 1],
                        },
                    ],
                },
                {
                    or: [
                        {
                            ["<"]: [{ var: "numericField" }, 100],
                        },
                    ],
                },
            ],
        }));
    });
    //   it("deserializes simple field", () => {
    //     expect(
    //       jsonLogicUtil.deserialize(
    //         JSON.stringify({
    //           and: [
    //             {
    //               or: [
    //                 {
    //                   "==": [
    //                     { var: "programId" },
    //                     "SSwpkEEcbUqx4vtoEByFjSkhKdCT862DNVb52nZg1UZ",
    //                   ],
    //                 },
    //                 {
    //                   "==": [
    //                     { var: "programId" },
    //                     "whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc",
    //                   ],
    //                 },
    //                 {
    //                   "==": [
    //                     { var: "programId" },
    //                     "EewxydAPCCVuNEyrVN68PuSYdQ7wKn27V9Gjeoi8dy3S",
    //                   ],
    //                 },
    //               ],
    //             },
    //           ],
    //         }),
    //         {
    //           programId: { type: "TEXT" },
    //         }
    //       )
    //     ).toEqual({
    //       programId: dataStreamFilters.text.or(
    //         dataStreamFilters.text.equals(
    //           "SSwpkEEcbUqx4vtoEByFjSkhKdCT862DNVb52nZg1UZ"
    //         ),
    //         dataStreamFilters.text.equals(
    //           "whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc"
    //         ),
    //         dataStreamFilters.text.equals(
    //           "EewxydAPCCVuNEyrVN68PuSYdQ7wKn27V9Gjeoi8dy3S"
    //         )
    //       ),
    //     });
    //   });
    //   it("deserialize composite field", () => {
    //     expect(
    //       jsonLogicUtil.deserialize(
    //         JSON.stringify({
    //           and: [
    //             {
    //               or: [
    //                 {
    //                   or: [
    //                     {
    //                       "==": [
    //                         { var: "srcMint" },
    //                         "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
    //                       ],
    //                     },
    //                     {
    //                       "==": [
    //                         { var: "dstMint" },
    //                         "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
    //                       ],
    //                     },
    //                   ],
    //                 },
    //                 {
    //                   or: [
    //                     {
    //                       "==": [
    //                         { var: "srcMint" },
    //                         "So11111111111111111111111111111111111111112",
    //                       ],
    //                     },
    //                     {
    //                       "==": [
    //                         { var: "dstMint" },
    //                         "So11111111111111111111111111111111111111112",
    //                       ],
    //                     },
    //                   ],
    //                 },
    //               ],
    //             },
    //           ],
    //         }),
    //         {
    //           mint: {
    //             type: "COMPOSITE",
    //             fields: ["srcMint", "dstMint"],
    //             dataType: "TEXT",
    //           },
    //         }
    //       )
    //     ).toEqual({
    //       mint: dataStreamFilters.composite(
    //         dataStreamFilters.text.or(
    //           dataStreamFilters.text.equals(
    //             "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
    //           ),
    //           dataStreamFilters.text.equals(
    //             "So11111111111111111111111111111111111111112"
    //           )
    //         ),
    //         ["srcMint", "dstMint"]
    //       ),
    //     });
    //   });
    //   it("deserializes AND field", () => {
    //     expect(
    //       jsonLogicUtil.deserialize(
    //         JSON.stringify({
    //           and: [
    //             {
    //               or: [
    //                 {
    //                   ">": [{ var: "blockId" }, 1],
    //                 },
    //               ],
    //             },
    //             {
    //               or: [
    //                 {
    //                   "<": [{ var: "blockId" }, 100],
    //                 },
    //               ],
    //             },
    //           ],
    //         }),
    //         {
    //             blockId: { type: "NUMERIC" },
    //         }
    //       )
    //     ).toEqual({
    //         blockId: dataStreamFilters.numeric.and(
    //         dataStreamFilters.numeric.greaterThan(1),
    //         dataStreamFilters.numeric.lessThan(100),
    //       ),
    //     });
    //   });
});
