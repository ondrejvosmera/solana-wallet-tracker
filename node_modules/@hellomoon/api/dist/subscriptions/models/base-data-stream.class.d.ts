import type { DataStream } from "../models/data-stream.interface";
import type { DataStreamAuthDetails, DataStreamRuleType, Subscription, WebhookTargetType, WebsocketTargetType } from "../models/subscription.interface";
import type { BaseDataStreamFilter } from "./base-data-stream-filter.type";
export interface DataStreamProps<TFilters> {
    target: WebhookTargetType | WebsocketTargetType;
    filters?: Partial<TFilters>;
    name?: string;
    subscriptionId?: string;
    authDetails?: DataStreamAuthDetails | null;
    ruleType?: DataStreamRuleType;
    apiKey?: string | null;
}
export declare abstract class BaseDataStream<TFilters extends BaseDataStreamFilter> implements DataStream<TFilters> {
    abstract readonly id: string;
    name?: string;
    subscriptionId?: string | undefined;
    dateCreated?: Date;
    dateLastUpdated?: Date;
    target: WebhookTargetType | WebsocketTargetType;
    filters?: Partial<TFilters>;
    authDetails?: DataStreamAuthDetails | null;
    ruleType?: DataStreamRuleType;
    apiKey?: string | null;
    constructor(props: DataStreamProps<TFilters>, subscriptionInfo?: {
        dateCreated?: Date;
        dateLastUpdated?: Date;
    });
    toSubscription(excludeRuleType?: boolean): Omit<Subscription, "dateCreated" | "dateLastUpdated">;
}
